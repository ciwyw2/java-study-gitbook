(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{951:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"select用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select用法"}},[e._v("#")]),e._v(" select用法")]),e._v(" "),t("h2",{attrs:{id:"_1-案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例"}},[e._v("#")]),e._v(" 1. 案例")]),e._v(" "),t("p",[e._v("UserMapper接口")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface UserMapper {\n    /**\n     * 通过id 查询用户\n     * @param id\n     * @return\n     */\n    User selectById(Long id);\n}\n")])])]),t("p",[e._v("UserMapper.xml")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="me.zszdevelop.dao.UserMapper">\n  <resultMap id="BaseResultMap" type="com.zszdevelop.domain.User">\n    <id column="id" jdbcType="BIGINT" property="id" />\n    <result column="user_name" jdbcType="VARCHAR" property="userName" />\n    <result column="user_password" jdbcType="VARCHAR" property="userPassword" />\n    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />\n    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />\n  </resultMap>\n  \n   <select id="selectById" resultMap="BaseResultMap">\n    SELECT * FROM sys_user WHERE id = #{id}\n  </select>\n</mapper>\n')])])]),t("h2",{attrs:{id:"_2-接口中的方法和xml怎么关联的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-接口中的方法和xml怎么关联的"}},[e._v("#")]),e._v(" 2.接口中的方法和XML怎么关联的")]),e._v(" "),t("p",[e._v("XML中的select标签的id属性值和定义的接口方法名是一样的。")]),e._v(" "),t("p",[t("strong",[e._v("规则")])]),e._v(" "),t("ul",[t("li",[e._v("当只使用XML 而不使用接口的时候，namespace 可以设置为任意不重复名称")]),e._v(" "),t("li",[e._v("标签的id属性值在任何时候都不能出现英文“.”,并且同一命名空间下不能出现重复的id")]),e._v(" "),t("li",[e._v("因为接口的方法是可以重载的，所以接口中可以出现多个同名参数名不同的方法，但是xml中id不能重复。因而接口中的所有同名方法会对应这xml中的同一个id的方法。")])]),e._v(" "),t("h2",{attrs:{id:"_3-标签与属性作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-标签与属性作用"}},[e._v("#")]),e._v(" 3. 标签与属性作用")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("<select>")]),e._v(":")]),e._v(" "),t("p",[e._v("映射查询语句使用的标签")])]),e._v(" "),t("li",[t("p",[e._v("id:")]),e._v(" "),t("p",[e._v("命名空间中的唯一标识符，可以用来代表这条语句")])]),e._v(" "),t("li",[t("p",[e._v("resultMap：")]),e._v(" "),t("p",[e._v("用于设置返回值的类型和映射关系")])]),e._v(" "),t("li",[t("p",[e._v("select标签中的select * from 是查询语句")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("#{id}")])]),e._v(" "),t("p",[e._v("Mybatis sql中预编译参数类型的一种方式，大括号中的id是传入的参数名")])])]),e._v(" "),t("h2",{attrs:{id:"_4-resultmap-标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-resultmap-标签"}},[e._v("#")]),e._v(" 4. resultMap 标签")]),e._v(" "),t("p",[e._v("resultMap 标签用于配置java 对象的属性和查询结果列的对应关系，通过resultMap中配置的column 和property可以将查询列的值映射到type对象的属性上，因此当我们使用select * 查询所有列的时候，Mybatis 也可以将结果正确的映射到User 对象上")]),e._v(" "),t("h3",{attrs:{id:"_4-1-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-属性"}},[e._v("#")]),e._v(" 4.1 属性")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("id：必填。并且唯一。在select 标签中，resultMap指定的值即为此处的id所设置的值")])]),e._v(" "),t("li",[t("p",[e._v("type：必填，用于配置查询列所映射到的java对象类型")])]),e._v(" "),t("li",[t("p",[e._v("extends：选填，可以配置当前的resultMap 继承自其它的resultMap，属性值为继承resultMap的id")])]),e._v(" "),t("li",[t("p",[e._v("autoMapping:选填，可选值为true或false，用于配置是否启用非映射字段（没有在resultMap 中配置的字段）的自动映射功能，该配置可以覆盖全局的autoMappingBehavior 配置")])])]),e._v(" "),t("h3",{attrs:{id:"_4-2-标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-标签"}},[e._v("#")]),e._v(" 4.2 标签")]),e._v(" "),t("ul",[t("li",[e._v("constructor：配置使用构造方法注入结果，包含以下两个子标签\n"),t("ul",[t("li",[e._v("idArg:id参数，标记结果作为id（唯一值），可以帮助提高整体性能")]),e._v(" "),t("li",[e._v("arg: 注入到构造方法的一个普通结果")])])]),e._v(" "),t("li",[e._v("id：一个id结果，标记结果作为id（唯一值），可以帮助提高整体性能")]),e._v(" "),t("li",[e._v("result: 注入到java对象属性的普通结果")]),e._v(" "),t("li",[e._v("association： 一个复杂的类型关联，许多结果将包成这种类型")]),e._v(" "),t("li",[e._v("collection: 复杂类型集合")]),e._v(" "),t("li",[e._v("discriminator:根据结果值来决定使用哪个结果映射")]),e._v(" "),t("li",[e._v("case: 基于某些值的结果映射")])]),e._v(" "),t("h2",{attrs:{id:"_5-id-和result-标签包含的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-id-和result-标签包含的属性"}},[e._v("#")]),e._v(" 5.id 和result 标签包含的属性")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("column:从数据库中得到的列名，或者是列的别名")])]),e._v(" "),t("li",[t("p",[e._v("property:映射到列结果的属性，")]),e._v(" "),t("ul",[t("li",[e._v("可以映射简单的如“username”，这样的属性，")]),e._v(" "),t("li",[e._v("也可以映射一些复杂对象的属性，例如“address.street.number”,这会通过“.”方式的属性嵌套赋值")])])]),e._v(" "),t("li",[t("p",[e._v("javaType：一个Java类的完全限定名，或一个类型的别名（通过typeAlias配置或者默认的类型）。")]),e._v(" "),t("ul",[t("li",[e._v("如果映射到一个JavaBean，mybatis 通常可以自动判断类型，")]),e._v(" "),t("li",[e._v("如映射到HashMap则需要明确指定javaType类型")])])]),e._v(" "),t("li",[t("p",[e._v("jdbcType：列对应的数据库类型")]),e._v(" "),t("ul",[t("li",[e._v("jdbc类型仅仅需要对插入、更新、删除操作可能为空的列进行处理（这是jdbc jdbcType要求，而不是mybatis）")])])]),e._v(" "),t("li",[t("p",[e._v("typeHandler：使用这个属性可以覆盖默认的类型处理器，")])])]),e._v(" "),t("p",[e._v("​")])])}),[],!1,null,null,null);a.default=r.exports}}]);
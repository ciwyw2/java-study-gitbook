(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{372:function(a,t,s){a.exports=s.p+"assets/img/image-20190917002342817.b8e39f87.png"},978:function(a,t,s){"use strict";s.r(t);var n=s(42),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"threadlocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[a._v("#")]),a._v(" ThreadLocal")]),a._v(" "),n("h2",{attrs:{id:"_1-什么是threadlocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是threadlocal"}},[a._v("#")]),a._v(" 1. 什么是ThreadLocal")]),a._v(" "),n("p",[a._v("我们先来看下JDK 的文档介绍")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("/**\n * This class provides thread-local variables.  These variables differ from\n * their normal counterparts in that each thread that accesses one (via its\n * {@code get} or {@code set} method) has its own, independently initialized\n * copy of the variable.  {@code ThreadLocal} instances are typically private\n * static fields in classes that wish to associate state with a thread (e.g.,\n * a user ID or Transaction ID).\n * \n * <p>For example, the class below generates unique identifiers local to each\n * thread.\n * A thread's id is assigned the first time it invokes {@code ThreadId.get()}\n * and remains unchanged on subsequent calls.\n */  \n")])])]),n("p",[a._v("ThreadLocal提供了线程的局部变量。每个线程都可以通过"),n("code",[a._v("set()")]),a._v("和"),n("code",[a._v("get()")]),a._v("来对这个 局部变量进行操作，但不会和其他线程的局部变量进行冲突。"),n("strong",[a._v("实现了线程的数据隔离")])]),a._v(" "),n("p",[a._v("简要言之：往ThreadLocal中填充的变量属于"),n("strong",[a._v("当前")]),a._v("线程，该变量对其他线程而言是隔离的。")]),a._v(" "),n("h2",{attrs:{id:"_2-为什么要学习threadlocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要学习threadlocal"}},[a._v("#")]),a._v(" 2. 为什么要学习ThreadLocal")]),a._v(" "),n("p",[a._v("从上面可以得出：ThreadLocal可以让我们拥有当前线程的变量，那这个作用有什么用呢？？？")]),a._v(" "),n("h3",{attrs:{id:"_2-1-管理connection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-管理connection"}},[a._v("#")]),a._v(" 2.1 管理Connection")]),a._v(" "),n("p",[n("strong",[a._v("最典型的是管理数据库的Connection")]),a._v("：")]),a._v(" "),n("p",[a._v("当时在学JDBC的时候，为了方便操作写了一个简单数据库连接池，需要数据库连接池的理由也很简单，频繁创建和关闭Connection是一件非常耗费资源的操作，因此需要创建数据库连接池～")]),a._v(" "),n("p",[a._v("那么，数据库连接池的连接怎么管理呢？？我们交由ThreadLocal来进行管理。为什么交给它来管理呢？？ThreadLocal能够实现"),n("strong",[a._v("当前线程的操作都是用同一个Connection，保证了事务！")])]),a._v(" "),n("p",[a._v("当时候写的代码：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class DBUtil {\n    //数据库连接池\n    private static BasicDataSource source;\n\n    //为不同的线程管理连接\n    private static ThreadLocal<Connection> local;\n\n\n    static {\n        try {\n            //加载配置文件\n            Properties properties = new Properties();\n\n            //获取读取流\n            InputStream stream = DBUtil.class.getClassLoader().getResourceAsStream("连接池/config.properties");\n\n            //从配置文件中读取数据\n            properties.load(stream);\n\n            //关闭流\n            stream.close();\n\n            //初始化连接池\n            source = new BasicDataSource();\n\n            //设置驱动\n            source.setDriverClassName(properties.getProperty("driver"));\n\n            //设置url\n            source.setUrl(properties.getProperty("url"));\n\n            //设置用户名\n            source.setUsername(properties.getProperty("user"));\n\n            //设置密码\n            source.setPassword(properties.getProperty("pwd"));\n\n            //设置初始连接数量\n            source.setInitialSize(Integer.parseInt(properties.getProperty("initsize")));\n\n            //设置最大的连接数量\n            source.setMaxActive(Integer.parseInt(properties.getProperty("maxactive")));\n\n            //设置最长的等待时间\n            source.setMaxWait(Integer.parseInt(properties.getProperty("maxwait")));\n\n            //设置最小空闲数\n            source.setMinIdle(Integer.parseInt(properties.getProperty("minidle")));\n\n            //初始化线程本地\n            local = new ThreadLocal<>();\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Connection getConnection() throws SQLException {\n        \n        if(local.get()!=null){\n            return local.get();\n        }else{\n        \n            //获取Connection对象\n            Connection connection = source.getConnection();\n    \n            //把Connection放进ThreadLocal里面\n            local.set(connection);\n    \n            //返回Connection对象\n            return connection;\n        }\n\n    }\n\n    //关闭数据库连接\n    public static void closeConnection() {\n        //从线程中拿到Connection对象\n        Connection connection = local.get();\n\n        try {\n            if (connection != null) {\n                //恢复连接为自动提交\n                connection.setAutoCommit(true);\n\n                //这里不是真的把连接关了,只是将该连接归还给连接池\n                connection.close();\n\n                //既然连接已经归还给连接池了,ThreadLocal保存的Connction对象也已经没用了\n                local.remove();\n\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n}\n')])])]),n("p",[a._v("同样的，Hibernate对Connection的管理也是采用了相同的手法(使用ThreadLocal，当然了Hibernate的实现是更强大的)～")]),a._v(" "),n("h2",{attrs:{id:"_2-2-避免一些参数传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-避免一些参数传递"}},[a._v("#")]),a._v(" 2.2 避免一些参数传递")]),a._v(" "),n("p",[n("strong",[a._v("避免一些参数的传递的理解")]),a._v("可以参考一下Cookie和Session：")]),a._v(" "),n("h2",{attrs:{id:"_3-threadlocal-实现的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-threadlocal-实现的原理"}},[a._v("#")]),a._v(" 3. ThreadLocal 实现的原理")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 得到当前线程对象")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t\t\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里获取ThreadLocalMap")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果map存在，则将当前线程对象t作为key，要存储的对象作为value存到map里面去")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("createMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),n("p",[a._v("上面有个ThreadLocalMap，我们去看看这是什么？")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v('/**\n         * The entries in this hash map extend WeakReference, using\n         * its main ref field as the key (which is always a\n         * ThreadLocal object).  Note that null keys (i.e. entry.get()\n         * == null) mean that the key is no longer referenced, so the\n         * entry can be expunged from table.  Such entries are referred to\n         * as "stale entries" in the code that follows.\n         */')]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Entry")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** The value associated with this ThreadLocal. */")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Entry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//....很长")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),n("p",[a._v("通过上面我们可以发现的是"),n("strong",[a._v("ThreadLocalMap是ThreadLocal的一个内部类。用Entry类来进行存储")])]),a._v(" "),n("p",[a._v("我们的"),n("strong",[a._v("值都是存储到这个Map上的，key是当前ThreadLocal对象")]),a._v("！")]),a._v(" "),n("p",[a._v("如果该Map不存在，则初始化一个：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("void createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n    }\n")])])]),n("p",[a._v("如果该Map存在，则"),n("strong",[a._v("从Thread中获取")]),a._v("！")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * Get the map associated with a ThreadLocal. Overridden in\n     * InheritableThreadLocal.\n     *\n     * @param  t the current thread\n     * @return the map\n     */")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("threadLocals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),n("p",[a._v("Thread维护了ThreadLocalMap变量")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/* ThreadLocal values pertaining to this thread. This map is maintained\n     * by the ThreadLocal class. */")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" threadLocals "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n")])])]),n("p",[a._v("从上面又可以看出，"),n("strong",[a._v("ThreadLocalMap是在ThreadLocal中使用内部类来编写的，但对象的引用是在Thread中")]),a._v("！")]),a._v(" "),n("p",[a._v("于是我们可以总结出："),n("strong",[a._v("Thread为每个线程维护了ThreadLocalMap这么一个Map，而ThreadLocalMap的key是LocalThread对象本身，value则是要存储的对象")])]),a._v(" "),n("p",[a._v("有了上面的基础，我们看get()方法就一点都不难理解了")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Entry")]),a._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getEntry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@SuppressWarnings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"unchecked"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setInitialValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),n("h3",{attrs:{id:"_3-1-threadlocal-原理总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-threadlocal-原理总结"}},[a._v("#")]),a._v(" 3.1 ThreadLocal 原理总结")]),a._v(" "),n("ol",[n("li",[a._v("每个Thread维护着一个ThreadLocalMap的引用")]),a._v(" "),n("li",[a._v("ThreadLocalMap 是ThreadLocal的内部类，用Entry来进行存储")]),a._v(" "),n("li",[a._v("调用ThreadLocal的set()方法时，实际上就是往ThreadLocalMap设置值，key是ThreadLocal对象，值是传递进来的对象")]),a._v(" "),n("li",[a._v("调用ThreadLocal的get()方法时，实际上就是往ThreadLocalMap获取值，key是ThreadLocal对象")]),a._v(" "),n("li",[n("strong",[a._v("ThreadLocal本身并不存储值")]),a._v("，它只是"),n("strong",[a._v("作为一个key来让线程从ThreadLocalMap获取value")]),a._v("。")])]),a._v(" "),n("h2",{attrs:{id:"_4-避免内存泄漏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-避免内存泄漏"}},[a._v("#")]),a._v(" 4. 避免内存泄漏")]),a._v(" "),n("p",[a._v("我们来看一下ThreadLocal的对象关系引用图：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(372),alt:"image-20190917002342817"}})]),a._v(" "),n("p",[a._v("ThreadLocal内存泄漏的根源是："),n("strong",[a._v("由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用")]),a._v("。")]),a._v(" "),n("p",[a._v("想要避免内存泄露就要"),n("strong",[a._v("手动remove()掉")]),a._v("！")]),a._v(" "),n("h2",{attrs:{id:"_5-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[a._v("#")]),a._v(" 5. 总结")]),a._v(" "),n("p",[n("strong",[a._v("ThreadLocal设计的目的就是为了能够在当前线程中有属于自己的变量，并不是为了解决并发或者共享变量的问题")])]),a._v(" "),n("h3",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5ac2eb52518825555e5e06ee#comment",target:"_blank",rel:"noopener noreferrer"}},[a._v("ThreadLocal就是这么简单"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);
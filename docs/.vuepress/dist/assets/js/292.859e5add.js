(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{1256:function(e,a,t){"use strict";t.r(a);var r=t(42),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-镜像与容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像与容器"}},[e._v("#")]),e._v(" Docker 镜像与容器")]),e._v(" "),t("h2",{attrs:{id:"_1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[e._v("#")]),e._v(" 1. 简介")]),e._v(" "),t("p",[e._v("Docker Image 俗称Docker镜像，它是由一系列图层（Layer）构成的，每个图层代表Dockerfile（通过Dockerfile我们可以创建镜像）中的一行指令，镜像是只读的")]),e._v(" "),t("h2",{attrs:{id:"_2-什么是dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是dockerfile"}},[e._v("#")]),e._v(" 2. 什么是Dockerfile")]),e._v(" "),t("p",[e._v("我们举个简单的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM centos\nRUN yum install -y vim\n")])])]),t("p",[e._v("上面Dockerfile包含两行命令（所以它对应两个图层），第一行表示从centos这个镜像中创建一个图层，然后第二行表示接着运行"),t("code",[e._v("yum install -y vim")]),e._v("来安装vim。通过这个Dockerfile我们可以构建一个镜像，通过镜像我们可以创建一个容器（Container）")]),e._v(" "),t("h2",{attrs:{id:"_3-什么是docker容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是docker容器"}},[e._v("#")]),e._v(" 3. 什么是Docker容器")]),e._v(" "),t("p",[e._v("容器是通过镜像构建的一个隔离的应用平台，它包含了运行应用程序所需要的一切。和镜像相比，他在顶部多了一个可读写的图层，如下图所示")]),e._v(" "),t("p",[e._v("![image-20191204232009862](/Users/zhangshengzhong/Library/Application Support/typora-user-images/image-20191204232009862.png)")]),e._v(" "),t("p",[e._v("镜像和容器的关系就像是Java的类和对象的关系那样，竟然是构建容器的模板，容器是镜像构建出来的实例")])])}),[],!1,null,null,null);a.default=s.exports}}]);
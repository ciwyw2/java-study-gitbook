(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{1243:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring-security-oauth2-深入解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-oauth2-深入解析"}},[t._v("#")]),t._v(" Spring security OAuth2 深入解析")]),t._v(" "),a("h1",{attrs:{id:"_1-oauth概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-oauth概要"}},[t._v("#")]),t._v(" 1. OAuth概要")]),t._v(" "),a("h3",{attrs:{id:"_1-1-oauth-基本流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-oauth-基本流程"}},[t._v("#")]),t._v(" 1.1 OAuth 基本流程")]),t._v(" "),a("p",[a("img",{attrs:{src:s(653),alt:"image-20200124153249544"}})]),t._v(" "),a("p",[t._v("基本组件")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("client")]),t._v(": 第三方应用（既App或向外提供接口）")]),t._v(" "),a("li",[a("strong",[t._v("Resource Owner")]),t._v(": 资源所有者（既用户）")]),t._v(" "),a("li",[a("strong",[t._v("Authentication Server")]),t._v(": 授权认证服务（发配Access Token）")]),t._v(" "),a("li",[a("strong",[t._v("Resource Server")]),t._v("： 资源服务器（存储用户资源信息等组员）")])]),t._v(" "),a("p",[t._v("微信和QQ 都是使用这种OAuth2的基本流程")]),t._v(" "),a("ol",[a("li",[t._v("第三方应用请求用户授权")]),t._v(" "),a("li",[t._v("用户同意授权，并发挥一个授权码（code）")]),t._v(" "),a("li",[t._v("第三方应用根据授权码（code）向授权认证服务进行授权；")]),t._v(" "),a("li",[t._v("授权服务器根据授权码（code）。校验通过，并返回给第三方应用令牌（Access Token）;")]),t._v(" "),a("li",[t._v("第三方应用根据令牌（Access Token）向资源服务请求相关资源")]),t._v(" "),a("li",[t._v("资源服务器验证令牌（Access Token），校验通过，并返回第三方所请求的资源")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-服务类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-服务类型"}},[t._v("#")]),t._v(" 1.2 服务类型")]),t._v(" "),a("p",[t._v("OAuth 在服务提供者上可分为两类：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("授权认证服务： AuthenticationServer")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Configuration\n@EnableAuthorizationServer\npublic class CustomAuthenticationServerConfig extends AuthorizationServerConfigurerAdapter \n")])])])]),t._v(" "),a("li",[a("p",[t._v("资源获取服务：ResourceServer")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Configuration\n@EnableResourceServer\npublic class CustomResourceServerConfig extends ResourceServerConfigurerAdapter\n")])])])])]),t._v(" "),a("p",[t._v("注：这两者有时候可能存在同一个应用程序中（既SOA架构）。在Spring OAuth 中可以简便的将"),a("strong",[t._v("其分配到两个应用中（既微服务），而且可多个资源获取共享一个授权认证服务器")])]),t._v(" "),a("h3",{attrs:{id:"_1-3-授权认证服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-授权认证服务"}},[t._v("#")]),t._v(" 1.3 授权认证服务")]),t._v(" "),a("p",[t._v("主要的操作：")]),t._v(" "),a("ol",[a("li",[t._v("获取第三方应用发送的授权码（code）以及第三方应用标识")]),t._v(" "),a("li",[t._v("根据授权码及标识进行校验")]),t._v(" "),a("li",[t._v("校验通过，发送令牌（Access Token）")])]),t._v(" "),a("p",[t._v("分析：")]),t._v(" "),a("p",[a("strong",[t._v("1）第一步")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("授权码（code）")]),t._v("：第三方应用进行第一步“Authorization Request”时，请求参数redirect_uri 中的回调链接，服务会生成相关用户凭证，并在其回调链接上附带的code")]),t._v(" "),a("li",[a("strong",[t._v("第三方用户标识")]),t._v("：\n"),a("ul",[a("li",[t._v("client_id: 第三方用户的id（可理解为账号）")]),t._v(" "),a("li",[t._v("client_secret: 第三方应用和授权服务器之间的安全凭证（可理解为密码）")])])])]),t._v(" "),a("p",[t._v("注：其中client_id 和 client_secret 都是授权服务器发送给第三方应用的，如：微信等一系列授权，在其平台上注册。获取其appid和secret同样道理")]),t._v(" "),a("p",[t._v("既然是账号密码，总不能以get请求，不安全，因此，OAuth2要求请求必须是POST请求，同时，还必须是HTTPS服务，以此保证获取到的安全凭证（Access Token）的安全性")]),t._v(" "),a("p",[a("strong",[t._v("2）第二步")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("授权认证服务器根据标识校验第三方应用的真实性")]),t._v(" "),a("li",[t._v("授权认证服务器根据授权码（code）进行校验用户凭证")])]),t._v(" "),a("p",[a("strong",[t._v("3）第三步操作")])]),t._v(" "),a("p",[t._v("生成Access Token （MD5类型，uuid类型，jwt类型）")]),t._v(" "),a("h3",{attrs:{id:"_1-4-资源获取服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-资源获取服务"}},[t._v("#")]),t._v(" 1.4 资源获取服务")]),t._v(" "),a("p",[t._v("主要的操作")]),t._v(" "),a("ul",[a("li",[t._v("校验Access Token")]),t._v(" "),a("li",[t._v("发放资源信息")])]),t._v(" "),a("h2",{attrs:{id:"_2-spring-security-oauth2-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-security-oauth2-的使用"}},[t._v("#")]),t._v(" 2. Spring Security OAuth2 的使用")]),t._v(" "),a("h3",{attrs:{id:"_2-1-授权认证服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-授权认证服务"}},[t._v("#")]),t._v(" 2.1 授权认证服务")]),t._v(" "),a("p",[t._v("Spirng OAuth2中，我们配置一个授权认证服务，我们最主要有以下三点：")]),t._v(" "),a("ol",[a("li",[t._v("第三方用户客户端详情 -> Client")]),t._v(" "),a("li",[t._v("令牌的生成管理 -> Access Token")]),t._v(" "),a("li",[t._v("端点接入 -> endpoints")])]),t._v(" "),a("p",[t._v("Spring 中有三个配置与这三点一一对应：")]),t._v(" "),a("ul",[a("li",[t._v("ClientDetailsServiceConfigurer: 用来配置客户端详情服务")]),t._v(" "),a("li",[t._v("AuthorizationServerSecurityConfigurer:用来配置令牌端点（Token EndPoint）的安全约束")]),t._v(" "),a("li",[t._v("AuthorizationServerEndpointsConfigurer: 配置授权（authorization）以及令牌（token）的访问端点和令牌服务（token services）")])]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-第三方用户客户端详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-第三方用户客户端详情"}},[t._v("#")]),t._v(" 2.1.1 第三方用户客户端详情")]),t._v(" "),a("p",[t._v("除了上面说道的client_id 和 client_client_secret,还需要一些服务附带一些授权认证参数")]),t._v(" "),a("p",[t._v("1）"),a("strong",[t._v("Grant Type")])]),t._v(" "),a("p",[t._v("其实OAuth2 不仅仅提供授权码（code）这种格式授权方式，还提供几个其他类型，其中用Grant Type 代表当前授权的类型。Grant Type包括")]),t._v(" "),a("ul",[a("li",[t._v("authorization_code:传统的授权码模式")]),t._v(" "),a("li",[t._v("Implicit:隐式授权模式")]),t._v(" "),a("li",[t._v("password：资源所有者（既用户）密码模式")]),t._v(" "),a("li",[t._v("client_credentials: 客户端凭证（客户端ID以及Key）模式")]),t._v(" "),a("li",[t._v("refresh_token:获取access token时附带的用于刷新新的token模式")])]),t._v(" "),a("p",[t._v("2）"),a("strong",[t._v("scope")])]),t._v(" "),a("p",[t._v("其实授权赋予第三方用户可以在资源服务器获取资源，经常就是调用Api请求附带令牌，然后调用api有增删改查等功能，而scopes的值就是all（全部权限），read，write等权限。就是第三方访问资源的一个权限，访问范围。")]),t._v(" "),a("p",[t._v("3）"),a("strong",[t._v("accessTokenValiditySeconds")])]),t._v(" "),a("p",[t._v("还可以设置accessTokenValiditySeconds属性来设置Access Token 的存活时间")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientDetailsServiceConfigurer")]),t._v(" clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inMemory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"catalpaFlat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("secret")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"catalpaFlat-secret"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accessTokenValiditySeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorizedGrantTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refresh_token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scopes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n｝\n")])])]),a("h4",{attrs:{id:"_2-1-2-令牌的生成和管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-令牌的生成和管理"}},[t._v("#")]),t._v(" 2.1.2 令牌的生成和管理")]),t._v(" "),a("p",[t._v("AccessToken的存在意义：")]),t._v(" "),a("ul",[a("li",[t._v("创建AccessToken，并保存，以备后续请求访问都可以认证成功并获取到资源")]),t._v(" "),a("li",[t._v("AccessToken还有一个潜在功能，就是使用jwt生成token时候，可以用来加载一些信息，把一些相关权限等包含在AccessToken中")])]),t._v(" "),a("p",[t._v("1） "),a("strong",[t._v("AuthorizationServerTokenServices")])]),t._v(" "),a("p",[t._v("AuthorizationServerTokenServices 提供了对AccessToken 的相关创建、刷新、获取")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizationServerTokenServices")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OAuth2AccessToken")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAccessToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OAuth2Authentication")]),t._v(" authentication"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OAuth2AccessToken")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refreshAccessToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" refreshToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TokenRequest")]),t._v(" tokenRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OAuth2AccessToken")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAccessToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OAuth2Authentication")]),t._v(" authentication"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("DefaultTokenServices")])])]),t._v(" "),a("p",[t._v("AuthorizationServerTokenServices 竟然可以操作AccessToken，那么OAuth2就默认为我们提供了一个默认的DefaultTokenServices。包含了一些有用实现，可以使用他来修改令牌的格式和令牌的存储等，但是"),a("strong",[t._v("生成的token")]),t._v("是随机数")]),t._v(" "),a("p",[t._v("3）"),a("strong",[t._v("TokenStore")])]),t._v(" "),a("p",[t._v("创建AccessToken完之后，除了发放给第三方，肯定还得保存起来，才可以使用。因此TokenStore为我们完成这一操作，"),a("strong",[t._v("将令牌（AccessToken）保存和持久化")]),t._v("。")]),t._v(" "),a("p",[t._v("okenStore也有一个默认的实现类InMemoryTokenStore，从名字就知道是通过保存到内存进而实现保存Access Token。 TokenStore的实现有多种类型，可以根据业务需求更改Access Token的保存类型：")]),t._v(" "),a("ul",[a("li",[t._v("InMemoryTokenStore：这个是OAuth2默认采用的实现方式。在单服务上可以体现出很好特效（即并发量不大，并且它在失败的时候不会进行备份），大多项目都可以采用此方法。毕竟存在内存，而不是磁盘中，调试简易。")]),t._v(" "),a("li",[t._v("JdbcTokenStore：这个是基于JDBC的实现，令牌（Access Token）会保存到数据库。这个方式，可以在多个服务之间实现令牌共享。")]),t._v(" "),a("li",[t._v("JwtTokenStore：jwt全称 JSON Web Token。这个实现方式不用管如何进行存储（内存或磁盘），因为它可以把相关信息数据编码存放在令牌里。JwtTokenStore 不会保存任何数据，但是它在转换令牌值以及授权信息方面与 DefaultTokenServices 所扮演的角色是一样的。但有两个缺点：\n"),a("ul",[a("li",[t._v("撤销一个已经授权的令牌会很困难，因此只适用于处理一个生命周期较短的以及撤销刷新令牌。")]),t._v(" "),a("li",[t._v("令牌占用空间大，如果加入太多用户凭证信息，会存在传输冗余")])])])]),t._v(" "),a("p",[t._v("4）JWT Token")]),t._v(" "),a("p",[t._v("想使用jwt令牌，需要在授权服务中配置JwtTokenStore。之前说了，jwt将一些信息数据编码后存放在令牌,那么其实在传输的时候是很不安全的，所以Spring OAuth2提供了JwtAccessTokenConverter来怼令牌进行编码和解码。适用JwtAccessTokenConverter可以自定义秘签（SigningKey）。SigningKey用处就是在授权认证服务器生成进行签名编码，在资源获取服务器根据SigningKey解码校验。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();\n\n jwtAccessTokenConverter.setSigningKey("CatalpaFlat")\n')])])]),a("p",[a("img",{attrs:{src:s(654),alt:"image-20200124221739806"}})]),t._v(" "),a("h4",{attrs:{id:"_2-1-3-端点接入-endpoints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-端点接入-endpoints"}},[t._v("#")]),t._v(" 2.1.3 端点接入-endpoints")]),t._v(" "),a("p",[t._v("授权认证是使用AuthorizationEndpoint这个端点来进行控制，一般使用AuthorizationServerEndpointsConfigurer 来进行配置。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {}\n")])])]),a("ol",[a("li",[t._v("端点（endpoints）的相关配置")])]),t._v(" "),a("ul",[a("li",[t._v("authenticationManager: 认证管理器。若我们上面的Grant Type设置为password，则需设置一个AuthenticationManager对象")]),t._v(" "),a("li",[t._v("userDetailsService：若是我们实现了UserDetailsService来管理用户信息，那么得设我们的userDetailsService对象")]),t._v(" "),a("li",[t._v("authorizationCodeServices：授权码服务。若我们上面的Grant Type设置为authorization_code，那么得设一个AuthorizationCodeServices对象")]),t._v(" "),a("li",[t._v("tokenStore：这个就是我们上面说到，把我们想要是实现的Access Token类型设置")]),t._v(" "),a("li",[t._v("accessTokenConverter：Access Token的编码器。也就是JwtAccessTokenConverter")]),t._v(" "),a("li",[t._v("tokenEnhancer:token的拓展。当使用jwt时候，可以实现TokenEnhancer来进行jwt对包含信息的拓展")]),t._v(" "),a("li",[t._v("tokenGranter：当默认的Grant Type已经不够我们业务逻辑，实现TokenGranter 接口，授权将会由我们控制，并且忽略Grant Type的几个属性。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("端点（endpoints）的授权url：要授权认证，肯定得由url请求，才可以传输，因此OAuth2提供了配置授权端点的URL")])]),t._v(" "),a("p",[t._v("AuthorizationServerEndpointsConfigurer ，还是这个配置对象进行配置，其中由一个pathMapping()方法进行配置授权端点URL路径，默认提供了两个参数defaultPath和customPath：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public AuthorizationServerEndpointsConfigurer pathMapping(String defaultPath, String customPath) {\n\t\tthis.patternMap.put(defaultPath, customPath);\n\t\treturn this;\n}\n")])])]),a("p",[t._v("pathMapping的defaultPath有：")]),t._v(" "),a("ul",[a("li",[t._v("/oauth/authorize：授权端点")]),t._v(" "),a("li",[t._v("/oauth/token："),a("strong",[t._v("获取授权token令牌")])]),t._v(" "),a("li",[t._v("/oauth/confirm_access：用户确认授权提交端点")]),t._v(" "),a("li",[t._v("/oauth/error：授权服务错误信息端点")]),t._v(" "),a("li",[t._v("/oauth/check_token：用于资源服务访问的令牌解析端点")]),t._v(" "),a("li",[t._v("/oauth/token_key：提供公有密匙的端点，如果使用JWT令牌的话")])]),t._v(" "),a("p",[a("strong",[t._v('注：pathMapping的两个参数都将以 "/" 字符为开始的字符串')])]),t._v(" "),a("h3",{attrs:{id:"_2-1-4-自定义错误处理-error-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-自定义错误处理-error-handling"}},[t._v("#")]),t._v(" 2.1.4 自定义错误处理（Error Handling）")]),t._v(" "),a("p",[t._v("实际上我们上面说到的端点,其实可以看成Controller，用于返回不同端点的响应内容")]),t._v(" "),a("p",[t._v("授权服务的错误信息是使用标准的Spring MVC来进行处理的，也就是 @ExceptionHandler 注解的端点方法，我们可以提供一个 WebResponseExceptionTranslator 对象。最好的方式是改变响应的内容而不是直接进行渲染。")]),t._v(" "),a("ul",[a("li",[t._v("假如说在呈现令牌端点的时候发生了异常，那么异常委托了 HttpMessageConverters 对象（它能够被添加到MVC配置中）来进行输出。")]),t._v(" "),a("li",[t._v('假如说在呈现授权端点的时候未通过验证，则会被重定向到 /oauth/error 即错误信息端点中。whitelabel error （即Spring框架提供的一个默认错误页面）错误端点提供了HTML的响应，但是我们大概可能需要实现一个自定义错误页面（例如只是简单的增加一个 @Controller 映射到请求路径上 @RequestMapping("/oauth/error")）。')])]),t._v(" "),a("h2",{attrs:{id:"_2-2-资源获取服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-资源获取服务"}},[t._v("#")]),t._v(" 2.2 资源获取服务")]),t._v(" "),a("p",[t._v("资源服务器，其实就是存放一些受令牌保护的资源，只有令牌并且有效正确才能获取到资源。内部是通过Spring OAuth2的Spring Security Authentication filter 的过滤链来进行保护。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-resourceserverconfigureradapter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-resourceserverconfigureradapter"}},[t._v("#")]),t._v(" 2.2.1 ResourceServerConfigurerAdapter")]),t._v(" "),a("p",[t._v("我们可以继承ResourceServerConfigurerAdapter，来使用 ResourceServerSecurityConfigurer进行相关配置。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResourceServerConfigurerAdapter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResourceServerConfigurer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResourceServerSecurityConfigurer")]),t._v(" resources"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSecurity")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\thttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorizeRequests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("anyRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authenticated")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n｝\n")])])]),a("h3",{attrs:{id:"_2-2-2-resourceserversecurityconfigurer的相关属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-resourceserversecurityconfigurer的相关属性"}},[t._v("#")]),t._v(" 2.2.2 ResourceServerSecurityConfigurer的相关属性")]),t._v(" "),a("ul",[a("li",[t._v("tokenServices：ResourceServerTokenServices 类的实例，用来实现令牌服务。")]),t._v(" "),a("li",[t._v("resourceId：这个资源服务的ID，这个属性是可选的，但是推荐设置并在授权服务中进行验证。")]),t._v(" "),a("li",[t._v("tokenExtractor 令牌提取器用来提取请求中的令牌。")]),t._v(" "),a("li",[t._v("请求匹配器，用来设置需要进行保护的资源路径，默认的情况下是受保护资源服务的全部路径。")]),t._v(" "),a("li",[t._v("受保护资源的访问规则，默认的规则是简单的身份验证（plain authenticated）。")]),t._v(" "),a("li",[t._v("其他的自定义权限保护规则通过 HttpSecurity 来进行配置。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-3-resourceservertokenservices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-resourceservertokenservices"}},[t._v("#")]),t._v(" 2.2.3 ResourceServerTokenServices")]),t._v(" "),a("p",[t._v("ResourceServerTokenServices 是组成授权服务的另一半。")]),t._v(" "),a("p",[t._v("1）.若是资源服务器和授权服务在同一个应用，可以使用DefaultTokenServices")]),t._v(" "),a("p",[t._v("2）.若是分离的。ResourceServerTokenServices必须知道令牌的如何解码。")]),t._v(" "),a("p",[t._v("ResourceServerTokenServices解析令牌的方法：")]),t._v(" "),a("ul",[a("li",[t._v("使用RemoteTokenServices，资源服务器通过HTTP请求来解码令牌。每次都请求授权服务器的端点-/oauth/check_toke，以此来解码令牌")]),t._v(" "),a("li",[t._v("若是访问量大，则通过http获取之后，换成令牌的结果")]),t._v(" "),a("li",[t._v("若是jwt令牌，需请求授权服务的/oauth/token_key，来获取key进行解码")])]),t._v(" "),a("p",[a("strong",[t._v("注：授权认证服务需要把/oauth/check_toke暴露出来，并且附带上权限访问。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizationServerSecurityConfigurer")]),t._v(" oauthServer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    oauthServer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tokenKeyAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"isAnonymous() || hasAuthority('ROLE_TRUSTED_CLIENT')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkTokenAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"hasAuthority('ROLE_TRUSTED_CLIENT')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5a3cbce05188252582279467",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring security OAuth2 深入解析"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports},653:function(t,e,s){t.exports=s.p+"assets/img/image-20200124153249544.b0f935d6.png"},654:function(t,e,s){t.exports=s.p+"assets/img/image-20200124221739806.a0710337.png"}}]);
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{1002:function(t,e,n){\"use strict\";n.r(e);var a=n(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"fileinputstream\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fileinputstream\"}},[t._v(\"#\")]),t._v(\" FileInputStream\")]),t._v(\" \"),n(\"p\",[t._v(\"FileInputStream 是将本地文件读到程序中来\")]),t._v(\" \"),n(\"p\",[t._v(\"使用\"),n(\"strong\",[t._v(\"read读\")]),t._v(\"，默认的构造器是\"),n(\"strong\",[t._v(\"一个字节一个字节读，然后-1的时候就读到文件的结尾\")])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"文件读取实例\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件读取实例\"}},[t._v(\"#\")]),t._v(\" 文件读取实例\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"最基本的文件读取\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最基本的文件读取\"}},[t._v(\"#\")]),t._v(\" 最基本的文件读取\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('\\t @Test\\n    public void test() throws Exception {\\n        // 1.创建一个File类的对象\\n        File file = new File(\"hello.txt\");\\n        // 2.创建一个FileInputStream类对象\\n        FileInputStream fis = new FileInputStream(file);\\n        // 3.调用FileInputStream 的方法，实现file文件的读取\\n        int b = fis.read();\\n        while (b!= -1){\\n            System.out.println(b);\\n            b = fis.read();\\n        }\\n        // 4.关闭相应的流\\n        fis.close();\\n    }\\n')])])]),n(\"h3\",{attrs:{id:\"赋值语句位置更改\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#赋值语句位置更改\"}},[t._v(\"#\")]),t._v(\" 赋值语句位置更改\")]),t._v(\" \"),n(\"p\",[t._v(\"我们可以看到上述代码，fis.read()出现了两次，可以进行一个小的改进\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"        // 3.调用FileInputStream 的方法，实现file文件的读取\\n//        int b = fis.read();\\n//        while (b!= -1){\\n//            System.out.println(b);\\n//            b = fis.read();\\n//        }\\n        int b;\\n        while ((b =fis.read())!=-1){\\n            System.out.println((char)b);\\n        }\\n\")])])]),n(\"p\",[t._v(\"将int型的强转char，英文没问题，但是中文就会出现乱码\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"使用try-catch处理异常\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用try-catch处理异常\"}},[t._v(\"#\")]),t._v(\" 使用try-catch处理异常\")]),t._v(\" \"),n(\"p\",[t._v(\"出了异常也要及时关闭资源\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(' @Test\\n    public void test2() {\\n        FileInputStream fis = null;\\n        // 1.创建一个File类的对象\\n        try {\\n            File file = new File(\"hello.txt\");\\n            // 2.创建一个FileInputStream类对象\\n             fis = new FileInputStream(file);\\n            // 3.调用FileInputStream 的方法，实现file文件的读取\\n            int b;\\n            while ((b =fis.read())!=-1){\\n                System.out.println((char)b);\\n            }\\n           \\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }finally {\\n            // 4.关闭相应的流\\n            try {\\n                fis.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n    }\\n')])])]),n(\"h3\",{attrs:{id:\"使用read重载方法read-byte-b\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用read重载方法read-byte-b\"}},[t._v(\"#\")]),t._v(\" *使用read重载方法read(byte[] b)\")]),t._v(\" \"),n(\"p\",[t._v(\"这样就可以不要一个一个读取\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(' @Test\\n    public void test3() {\\n        FileInputStream fis = null;\\n        // 1.创建一个File类的对象\\n        try {\\n            File file = new File(\"hello.txt\");\\n            // 2.创建一个FileInputStream类对象\\n            fis = new FileInputStream(file);\\n            // 3.调用FileInputStream 的方法，实现file文件的读取\\n            byte[] b  = new byte[8];\\n            int len;\\n            while ((len =fis.read(b))!=-1){\\n                String str = new String(b,0,len);\\n                System.out.print(str);\\n            }\\n\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }finally {\\n            // 4.关闭相应的流\\n            try {\\n                fis.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n    }\\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}
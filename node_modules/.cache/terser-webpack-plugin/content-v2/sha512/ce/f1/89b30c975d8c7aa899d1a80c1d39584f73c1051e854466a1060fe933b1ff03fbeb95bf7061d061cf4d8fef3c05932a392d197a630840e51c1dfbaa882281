{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{921:function(e,t,r){\"use strict\";r.r(t);var v=r(42),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"servlet\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#servlet\"}},[e._v(\"#\")]),e._v(\" Servlet\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"_1-简介\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-简介\"}},[e._v(\"#\")]),e._v(\" 1.简介\")]),e._v(\" \"),r(\"p\",[e._v(\"在Java Web程序中，Servlet 主要负责接收用户请求HttpServletRequest,在doGet()，doPost() 中做相应的处理，并将回应HttpServletResponse反馈给用户\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"一个Servlet类只会有一个实例，在他初始化时调用init方法，销毁时调用destory()方法\")]),e._v(\" \"),r(\"li\",[e._v(\"Servlet需要在web.xml中配置。一个servlet可以设置多个url访问\")]),e._v(\" \"),r(\"li\",[e._v(\"servlet 不是线程安全，因此谨慎使用类变量\")])]),e._v(\" \"),r(\"h2\",{attrs:{id:\"_2-servlet-接口\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-servlet-接口\"}},[e._v(\"#\")]),e._v(\" 2.Servlet 接口\")]),e._v(\" \"),r(\"p\",[e._v(\"Servlet 接口定义了5个方法，其中init,service,destory 与Servlet 的周明周期有关\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"public interface Servlet {\\n    void init(ServletConfig config) throws ServletException;\\n\\n    void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException;\\n\\n    void destroy();\\n  \\n    String getServletInfo();\\n    \\n    ServletConfig getServletConfig();\\n}\\n\")])])]),r(\"h2\",{attrs:{id:\"_3-servlet-生命周期\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-servlet-生命周期\"}},[e._v(\"#\")]),e._v(\" 3. Servlet 生命周期\")]),e._v(\" \"),r(\"p\",[e._v(\"Web容器加载Servlet 并将其实例化后，Servlet 生命周期开始\")]),e._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[e._v(\"init()：容器运行期init()方法进行Servlet的初始化\")]),e._v(\" \"),r(\"p\",[e._v(\"初始化资源\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"service()： 请求到达时调用Servlet 的service() 方法,service() 方法会根据需要调用与请求对象的doGet 或doPost等方法\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"destory()： 当服务器关闭或项目被卸载时服务器将Servlet 实例销毁，此时会调用Servlet 的destory()\")]),e._v(\" \"),r(\"p\",[e._v(\"销毁资源\")])])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"特点\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特点\"}},[e._v(\"#\")]),e._v(\" 特点\")]),e._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[e._v(\"其中init() 和destory（）方法只会执行一次，\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"service 方法客户端每次请求Servlet 都会执行\")])])]),e._v(\" \"),r(\"h2\",{attrs:{id:\"_4-servlet-与线程安全\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-servlet-与线程安全\"}},[e._v(\"#\")]),e._v(\" 4. Servlet 与线程安全\")]),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"Servlet 不是线程安全的，多线程并发的读写会导致数据不同步的问题\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_4-1-解决办法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-1-解决办法\"}},[e._v(\"#\")]),e._v(\" 4.1 解决办法\")]),e._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[e._v(\"尽量不要定义name属性（成员变量），而是要把name变量分别定义在doGet()和doPost（）方法内。\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"synchronized(name){} 语句块可以解决问题，但会造成线程等待，不是很科学\")])])]),e._v(\" \"),r(\"p\",[e._v(\"注：写数据才会导致线程安全，数据不同步的问题。因此Servlet 里的只读属性最好定义成final类型\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}
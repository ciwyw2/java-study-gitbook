{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{1291:function(t,_,a){\"use strict\";a.r(_);var v=a(42),r=Object(v.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"oauth2基础\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#oauth2基础\"}},[t._v(\"#\")]),t._v(\" OAuth2基础\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_1-简介\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-简介\"}},[t._v(\"#\")]),t._v(\" 1. 简介\")]),t._v(\" \"),v(\"p\",[t._v(\"OAuth 是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_2-应用场景\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-应用场景\"}},[t._v(\"#\")]),t._v(\" 2. 应用场景\")]),t._v(\" \"),v(\"p\",[t._v(\"我们举个例子\")]),t._v(\" \"),v(\"p\",[t._v(\"有一个“云冲印”的网站，可以将用户存在Google 的招聘，冲印出来。用户为了使用该服务，必须让“云冲印”读取自己存储在Goodle上的照片\")]),t._v(\" \"),v(\"img\",{staticStyle:{zoom:\"30%\"},attrs:{src:a(776),alt:\"image-20191114222612910\"}}),t._v(\" \"),v(\"p\",[t._v(\"问题是只有得到用户的授权，google 才会同意“云冲印”读取这些招聘，那么，“云冲印”怎样获得用户的授权呢？\")]),t._v(\" \"),v(\"p\",[t._v(\"传统方法是，用户将自己的Google用户名和密码，告诉“云冲印”，后者就可以读取用户的照片了。但这样的做法有以下几个严重的缺点\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"“云冲印”为了后序的服务，会保存用户的密码，这样很不安全\")]),t._v(\" \"),v(\"li\",[t._v(\"google 不得不部署密码登录，而我们知道，单纯的密码登录并不安全\")]),t._v(\" \"),v(\"li\",[t._v(\"“云冲印”拥有了获取用户存储在Google所有资料的权利，用户没法限制“云冲印”获得授权的范围和有效期\")]),t._v(\" \"),v(\"li\",[t._v(\"用户只有修改密码。才能收回赋予“云冲印”的权力，但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效\")]),t._v(\" \"),v(\"li\",[t._v(\"只要有一个第三方应用程序被破解，就会导致用户密码泄露，以及所有被密码保护的数据泄露\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_3-名词定义\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-名词定义\"}},[t._v(\"#\")]),t._v(\" 3. 名词定义\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"Third-party application: 第三方应用程序，本文又称“客户端”（client），既上一节的“云冲印”\")]),t._v(\" \"),v(\"li\",[t._v(\"Http service：Http服务器提供商，本文中简称“服务提供商”，既上一节例子中的Google\")]),t._v(\" \"),v(\"li\",[t._v(\"Resource owner: 资源所有者，本文中又称“用户”（user）\")]),t._v(\" \"),v(\"li\",[t._v(\"User Agent：用户代理，本文中就是指浏览器\")]),t._v(\" \"),v(\"li\",[t._v(\"Authorization server: 认证服务器，既服务提供商专门用来处理认证的服务器\")]),t._v(\" \"),v(\"li\",[t._v(\"Resource server: 资源服务器，既服务提供商存放用户生成资源的服务器。他与认证服务器，可以是同一台服务器，也可以是不同的服务器\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_4-oauth的思路\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-oauth的思路\"}},[t._v(\"#\")]),t._v(\" 4. OAuth的思路\")]),t._v(\" \"),v(\"p\",[t._v(\"OAuth在“客户端”与“服务提供商”之间，设置了一个授权层（authorization layer）。“客户端”不能直接登录“服务提供商”，只能登录授权层，以此将用户与客户端区分开来。“客户端”登录授权层所用的令牌（token），与用户的密码不同，用户可以在登录的时候，\"),v(\"strong\",[t._v(\"指定授权层令牌的权限范围和有效期\")])]),t._v(\" \"),v(\"p\",[t._v(\"“客户端”登录授权层以后。“服务提供商”根据令牌的权限范围和有效期，向“客户端”开发用户存储的资料\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_5-运行流程\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-运行流程\"}},[t._v(\"#\")]),t._v(\" 5. 运行流程\")]),t._v(\" \"),v(\"p\",[t._v(\"OAuth 2.0 的运行流程如下图\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:a(777),alt:\"image-20191114224148304\"}})]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"用户打开客户端以后，客户端要求用于给予授权\")]),t._v(\" \"),v(\"li\",[v(\"strong\",[t._v(\"用户同意给予客户端授权\")])]),t._v(\" \"),v(\"li\",[t._v(\"客户端使用上一步获得的授权，向认证服务器申请令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"认证服务器对客户端进行认证以后，确认无误，同意发放令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"客户端使用令牌，向资源服务器申请获取资源\")]),t._v(\" \"),v(\"li\",[t._v(\"资源服务器确认令牌无误，同意向客户端开放资源\")])]),t._v(\" \"),v(\"p\",[t._v(\"通过上面6个步骤，可以看出2是关键。既用户怎样才能给予客户端授权，有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_6-客户端的授权模式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-客户端的授权模式\"}},[t._v(\"#\")]),t._v(\" 6. 客户端的授权模式\")]),t._v(\" \"),v(\"p\",[t._v(\"客户端必须得到用户的授权（authorization grant）,才能获得令牌（access token）。OAuth 2.0 定义了四种授权方式\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"授权码模式（authorization code）\")]),t._v(\" \"),v(\"li\",[t._v(\"简化模式（implicit）\")]),t._v(\" \"),v(\"li\",[t._v(\"密码模式（resource owner password credentials）\")]),t._v(\" \"),v(\"li\",[t._v(\"客户端模式（client credential）\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_6-1-授权码模式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-1-授权码模式\"}},[t._v(\"#\")]),t._v(\" 6.1 授权码模式\")]),t._v(\" \"),v(\"p\",[t._v(\"授权码模式（authorization code）是功能最完整、流程最验密的授权模式。他的特点就是\"),v(\"strong\",[t._v(\"通过客户端的后台服务器，与“服务提供商”的认证服务器进行互动\")])]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:a(778),alt:\"image-20191114225241648\"}})]),t._v(\" \"),v(\"p\",[t._v(\"他的步骤如下：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"用户访问客户端，后者将前者导向认证服务器\")]),t._v(\" \"),v(\"li\",[t._v(\"用户选择是否给予客户端授权\")]),t._v(\" \"),v(\"li\",[t._v(\"假设用户给予授权，认证服务器将用户导向客户端事先指定的“重定向URL”(redirection URL),同时附上一个授权码\")]),t._v(\" \"),v(\"li\",[t._v(\"客户端收到授权码，附上早先的“重定向URI”,向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。\")]),t._v(\" \"),v(\"li\",[t._v(\"认证服务器核对授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_6-2-简化模式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-2-简化模式\"}},[t._v(\"#\")]),t._v(\" 6.2 简化模式\")]),t._v(\" \"),v(\"p\",[t._v(\"简化模式（implicit grant type）\"),v(\"strong\",[t._v(\"不通过第三方应用服务器，直接在浏览器中想认证服务器申请令牌，跳过了“授权码”这个步骤\")]),t._v(\"。所有步骤都在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:a(779),alt:\"image-20191114230656462\"}})]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"客户端将用户导向认证服务器\")]),t._v(\" \"),v(\"li\",[t._v(\"用户决定是否给予客户端授权\")]),t._v(\" \"),v(\"li\",[t._v(\"假设用户给予授权，认证服务器将用户导向客户端指定的“重定向URI”,并在URI 的Hash部分包含了访问令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"浏览器想资源服务器发出请求，其中不包括上一步收到的Hash值\")]),t._v(\" \"),v(\"li\",[t._v(\"资源服务区返回一个网页，其中包含的代码可以获取Hash值中的令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"浏览器执行上一步获得的脚本，提取出令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"浏览器将令牌发给客户端\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_6-3-密码模式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-3-密码模式\"}},[t._v(\"#\")]),t._v(\" 6.3 密码模式\")]),t._v(\" \"),v(\"p\",[t._v(\"密码模式（Resource Owner Password Credentials Grant）中，\"),v(\"strong\",[t._v(\"用于向客户端提供自己的用户名和密码\")]),t._v(\"。客户端使用这些信息，向“服务商提供商”索要授权\")]),t._v(\" \"),v(\"p\",[t._v(\"在这种模式中，用户必须要把自己的密码给客户端，但是客户端不得存储密码。\"),v(\"strong\",[t._v(\"这通常用在用户对客户端高度信任的情况下\")]),t._v(\"。比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:a(780),alt:\"image-20191114231623274\"}})]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"用户向客户端提供用户名和密码\")]),t._v(\" \"),v(\"li\",[t._v(\"客户端将用户名和密码发送给认证服务器，向后者请求令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"认证服务器确认无误后，向客户端提供访问令牌\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_6-4-客户端模式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-4-客户端模式\"}},[t._v(\"#\")]),t._v(\" 6.4 客户端模式\")]),t._v(\" \"),v(\"p\",[t._v(\"客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向“服务提供商”进行认证。严格的说，客户端模式并不属于OAuth框架所有解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求“服务提供商”，提供服务，其实不存在授权问题。\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:a(781),alt:\"image-20191114232143335\"}})]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"客户端向认证服务器进行身份认证，并要求一个访问令牌\")]),t._v(\" \"),v(\"li\",[t._v(\"认证服务器确认无误后，向客户端提供访问令牌\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_7-更新令牌\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-更新令牌\"}},[t._v(\"#\")]),t._v(\" 7. 更新令牌\")]),t._v(\" \"),v(\"p\",[t._v(\"如果用户访问的时候，客户端的“访问令牌”已经过期，则需要使用“更新令牌”申请一个新的访问令牌\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"参考文章\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[t._v(\"#\")]),t._v(\" 参考文章\")]),t._v(\" \"),v(\"p\",[v(\"a\",{attrs:{href:\"https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"理解OAuth 2.0\"),v(\"OutboundLink\")],1)])])}),[],!1,null,null,null);_.default=r.exports},776:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114222612910.af2acf63.png\"},777:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114224148304.ed8ef6b0.png\"},778:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114225241648.e324699a.png\"},779:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114230656462.a5130e56.png\"},780:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114231623274.e72b2005.png\"},781:function(t,_,a){t.exports=a.p+\"assets/img/image-20191114232143335.7ecba488.png\"}}]);","extractedComments":[]}
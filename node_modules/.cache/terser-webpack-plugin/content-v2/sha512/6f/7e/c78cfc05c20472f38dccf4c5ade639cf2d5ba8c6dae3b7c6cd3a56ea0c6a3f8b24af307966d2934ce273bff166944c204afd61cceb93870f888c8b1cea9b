{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{981:function(t,e,a){\"use strict\";a.r(e);var r=a(42),l=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"threadlocal使用不当导致内存泄漏\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#threadlocal使用不当导致内存泄漏\"}},[t._v(\"#\")]),t._v(\" ThreadLocal使用不当导致内存泄漏\")]),t._v(\" \"),a(\"p\",[t._v(\"线程池的一个线程使用完 Threadlocal 对象之后，由于线程池中的线程不会退出，线程池中的线程池存在，同时ThreadLocal变量也会存在，占用内存，造成OOM溢出。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"参考文章\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[t._v(\"#\")]),t._v(\" 参考文章\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/xlgen157387/article/details/78297568\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"多图深入分析ThreadLocal原理\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/xlgen157387/article/details/78298840\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java多线程编程-（9）-ThreadLocal造成OOM内存溢出案例演示与原理分析\"),a(\"OutboundLink\")],1)])])}),[],!1,null,null,null);e.default=l.exports}}]);","extractedComments":[]}
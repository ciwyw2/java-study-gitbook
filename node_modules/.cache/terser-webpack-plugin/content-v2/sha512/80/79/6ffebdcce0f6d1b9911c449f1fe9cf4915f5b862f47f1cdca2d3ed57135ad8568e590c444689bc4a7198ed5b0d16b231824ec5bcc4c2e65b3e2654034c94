{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{1113:function(e,n,_){\"use strict\";_.r(n);var r=_(42),s=Object(r.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"p\",[e._v(\"Explain使用分析\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"_1-简介\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-简介\"}},[e._v(\"#\")]),e._v(\" 1. 简介\")]),e._v(\" \"),r(\"p\",[e._v(\"MySQL 提供了一个EXPLAIN 命令，他可以对 SELECT语句进行分析，并输出SELECT 执行的详细信息，以供开发人员针对性优化\")]),e._v(\" \"),r(\"p\",[e._v(\"EXPLAIN 命令语法十分简单，在SELECT 语句前加上EXPLAIN\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"EXPLAIN SELECT * FROM user_info WHERE id <300;\\n\")])])]),r(\"h2\",{attrs:{id:\"_2-准备\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-准备\"}},[e._v(\"#\")]),e._v(\" 2. 准备\")]),e._v(\" \"),r(\"p\",[e._v(\"为了方便演示EXPLAIN 的使用，首先我们需要建立两个测试用的表，并添加相应的数据\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"CREATE TABLE `user_info` (\\n  `id`   BIGINT(20)  NOT NULL AUTO_INCREMENT,\\n  `name` VARCHAR(50) NOT NULL DEFAULT '',\\n  `age`  INT(11)              DEFAULT NULL,\\n  PRIMARY KEY (`id`),\\n  KEY `name_index` (`name`)\\n)\\n  ENGINE = InnoDB\\n  DEFAULT CHARSET = utf8;\\n\\nINSERT INTO user_info (name, age) VALUES ('xys', 20);\\nINSERT INTO user_info (name, age) VALUES ('a', 21);\\nINSERT INTO user_info (name, age) VALUES ('b', 23);\\nINSERT INTO user_info (name, age) VALUES ('c', 50);\\nINSERT INTO user_info (name, age) VALUES ('d', 15);\\nINSERT INTO user_info (name, age) VALUES ('e', 20);\\nINSERT INTO user_info (name, age) VALUES ('f', 21);\\nINSERT INTO user_info (name, age) VALUES ('g', 23);\\nINSERT INTO user_info (name, age) VALUES ('h', 50);\\nINSERT INTO user_info (name, age) VALUES ('i', 15);\\n\")])])]),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"CREATE TABLE `order_info` (\\n  `id`           BIGINT(20)  NOT NULL AUTO_INCREMENT,\\n  `user_id`      BIGINT(20)           DEFAULT NULL,\\n  `product_name` VARCHAR(50) NOT NULL DEFAULT '',\\n  `productor`    VARCHAR(30)          DEFAULT NULL,\\n  PRIMARY KEY (`id`),\\n  KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\\n)\\n  ENGINE = InnoDB\\n  DEFAULT CHARSET = utf8;\\n\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'WHH');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p2', 'WL');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (1, 'p1', 'DX');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p1', 'WHH');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (2, 'p5', 'WL');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (3, 'p3', 'MA');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (4, 'p1', 'WHH');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (6, 'p1', 'WHH');\\nINSERT INTO order_info (user_id, product_name, productor) VALUES (9, 'p8', 'TE');\\n\")])])]),r(\"h2\",{attrs:{id:\"_3-explain-输出格式\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-explain-输出格式\"}},[e._v(\"#\")]),e._v(\" 3. EXPLAIN 输出格式\")]),e._v(\" \"),r(\"p\",[e._v(\"EXPLAIN 命令的输出内容大致内容\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> explain select * from user_info where id = 2\\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: const\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: NULL\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"p\",[e._v(\"各列的含义\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"id: SELECT 查询的标识符，每个SELECT 都会自动分配一个唯一的标识符\")]),e._v(\" \"),r(\"li\",[e._v(\"select_type: SELECT 查询的类型\")]),e._v(\" \"),r(\"li\",[e._v(\"table: 查询的是哪个表\")]),e._v(\" \"),r(\"li\",[e._v(\"partitions: 匹配的分区\")]),e._v(\" \"),r(\"li\",[e._v(\"type： join类型\")]),e._v(\" \"),r(\"li\",[e._v(\"possible_keys: 此次查询可能选择的索引\")]),e._v(\" \"),r(\"li\",[e._v(\"key: 此次查询中确切使用到的索引\")]),e._v(\" \"),r(\"li\",[e._v(\"ref：哪个字段或常数与key字段一起被使用\")]),e._v(\" \"),r(\"li\",[e._v(\"rows：显示此查询一共扫描了多少航，这个是一个估计值\")]),e._v(\" \"),r(\"li\",[e._v(\"filtered: 表示此查询条件所过滤的数据的百分比\")]),e._v(\" \"),r(\"li\",[e._v(\"extra： 额外的信息\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-1-select-type\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-select-type\"}},[e._v(\"#\")]),e._v(\" 3.1 select_type\")]),e._v(\" \"),r(\"p\",[e._v(\"select_type 表示查询的类型，他常用的取值有\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"SIMPLE: 表示此查询不包含UNION 查询或子查询\")]),e._v(\" \"),r(\"li\",[e._v(\"PRIMARY: 表示此查询是最外层的查询\")]),e._v(\" \"),r(\"li\",[e._v(\"UNION: 表示此查询是UNION 的第二或随后的查询\")]),e._v(\" \"),r(\"li\",[e._v(\"DEPENDENT UNION, UNION 中的第二个或后面的查询语句，取决于外面的查询\")]),e._v(\" \"),r(\"li\",[e._v(\"UNION RESULT, UNION 的结果\")]),e._v(\" \"),r(\"li\",[e._v(\"SUBQUERY, 子查询中的第一个 SELECT\")]),e._v(\" \"),r(\"li\",[e._v(\"DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.\")])]),e._v(\" \"),r(\"h4\",{attrs:{id:\"_3-1-1-simple\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-1-simple\"}},[e._v(\"#\")]),e._v(\" 3.1.1 SIMPLE\")]),e._v(\" \"),r(\"p\",[e._v(\"最常见的查询类别应该是 \"),r(\"code\",[e._v(\"SIMPLE\")]),e._v(\" 了, 比如当我们的查询没有子查询, 也没有 UNION 查询时, 那么通常就是 \"),r(\"code\",[e._v(\"SIMPLE\")]),e._v(\" 类型。例如：\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> explain select * from user_info where id = 2\\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: const\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: NULL\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"h4\",{attrs:{id:\"_3-1-2-union\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-2-union\"}},[e._v(\"#\")]),e._v(\" 3.1.2 UNION\")]),e._v(\" \"),r(\"p\",[e._v(\"如果我们使用了UNION 查询，那么EXPLAIN 输出的结果类似如下\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"EXPLAIN (SELECT * FROM user_info  WHERE id IN (1, 2, 3))\\n    ->  UNION\\n    ->  (SELECT * FROM user_info WHERE id IN (3, 4, 5));\\n\")])])]),r(\"p\",[r(\"img\",{attrs:{src:_(527),alt:\"image-20190910230049046\"}})]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-2-table\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-table\"}},[e._v(\"#\")]),e._v(\" 3.2 table\")]),e._v(\" \"),r(\"p\",[e._v(\"表示查询设计的表或者衍生表\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-3-type-重要\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-type-重要\"}},[e._v(\"#\")]),e._v(\" 3.3 type （重要）\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"type\")]),e._v(\" 字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过 \"),r(\"code\",[e._v(\"type\")]),e._v(\" 字段, 我们判断此次查询是 \"),r(\"code\",[e._v(\"全表扫描\")]),e._v(\" 还是 \"),r(\"code\",[e._v(\"索引扫描\")]),e._v(\" 等.\")]),e._v(\" \"),r(\"h4\",{attrs:{id:\"_3-3-1-system\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-1-system\"}},[e._v(\"#\")]),e._v(\" 3.3.1 system\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"system\")]),e._v(\": 表中只有一条数据. 这个类型是特殊的 \"),r(\"code\",[e._v(\"const\")]),e._v(\" 类型.\")]),e._v(\" \"),r(\"h4\",{attrs:{id:\"_3-3-2-const\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-2-const\"}},[e._v(\"#\")]),e._v(\" 3.3.2 const\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"const\")]),e._v(\": 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.\\n例如下面的这个查询, 它使用了主键索引, 因此 \"),r(\"code\",[e._v(\"type\")]),e._v(\" 就是 \"),r(\"code\",[e._v(\"const\")]),e._v(\" 类型的.\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"\\nmysql> explain select * from user_info where id = 2\\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: const\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: NULL\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"h4\",{attrs:{id:\"_3-3-3-eq-ref\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-3-eq-ref\"}},[e._v(\"#\")]),e._v(\" 3.3.3 eq_ref\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"eq_ref\")]),e._v(\": 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 \"),r(\"code\",[e._v(\"=\")]),e._v(\", 查询效率较高. 例如:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id\\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: index\\npossible_keys: user_product_detail_index\\n          key: user_product_detail_index\\n      key_len: 254\\n          ref: NULL\\n         rows: 8\\n     filtered: 100.00\\n        Extra: Using where; Using index\\n*************************** 2. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: eq_ref\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: test.order_info.user_id\\n         rows: 1\\n     filtered: 100.00\\n        Extra: NULL\\n2 rows in set, 1 warning (0.00 sec)\\n\")])])]),r(\"h4\",{attrs:{id:\"_3-3-4-ref\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-4-ref\"}},[e._v(\"#\")]),e._v(\" 3.3.4 ref\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"ref\")]),e._v(\": 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 \"),r(\"code\",[e._v(\"最左前缀\")]),e._v(\" 规则索引的查询.\\n例如下面这个例子中, 就使用到了 \"),r(\"code\",[e._v(\"ref\")]),e._v(\" 类型的查询:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM user_info, order_info WHERE user_info.id = order_info.user_id AND order_info.user_id = 5\\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: const\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: NULL\\n*************************** 2. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: ref\\npossible_keys: user_product_detail_index\\n          key: user_product_detail_index\\n      key_len: 9\\n          ref: const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: Using index\\n2 rows in set, 1 warning (0.00 sec)\\n\\n\")])])]),r(\"h4\",{attrs:{id:\"_3-3-5-range\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-5-range\"}},[e._v(\"#\")]),e._v(\" 3.3.5 range\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"range\")]),e._v(\": 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, <>, >, >=, <, <=, IS NULL, <=>, BETWEEN, IN() 操作中.\\n当 \"),r(\"code\",[e._v(\"type\")]),e._v(\" 是 \"),r(\"code\",[e._v(\"range\")]),e._v(\" 时, 那么 EXPLAIN 输出的 \"),r(\"code\",[e._v(\"ref\")]),e._v(\" 字段为 NULL, 并且 \"),r(\"code\",[e._v(\"key_len\")]),e._v(\" 字段是此次查询中使用到的索引的最长的那个.\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT *\\n    ->  FROM user_info\\n    -> WHERE id BETWEEN 2 AND 8 \\\\G;\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: range\\npossible_keys: PRIMARY\\n          key: PRIMARY\\n      key_len: 8\\n          ref: NULL\\n         rows: 7\\n     filtered: 100.00\\n        Extra: Using where\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"h4\",{attrs:{id:\"_3-3-5-index\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-5-index\"}},[e._v(\"#\")]),e._v(\" 3.3.5 index\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"index\")]),e._v(\": 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.\\n\"),r(\"code\",[e._v(\"index\")]),e._v(\" 类型通常出现在: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据. 当是这种情况时, Extra 字段 会显示 \"),r(\"code\",[e._v(\"Using index\")]),e._v(\".\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT name FROM  user_info \\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: index\\npossible_keys: NULL\\n          key: name_index\\n      key_len: 152\\n          ref: NULL\\n         rows: 10\\n     filtered: 100.00\\n        Extra: Using index\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"p\",[e._v(\"上面的例子中, 我们查询的 name 字段恰好是一个索引, 因此我们直接从索引中获取数据就可以满足查询的需求了, 而不需要查询表中的数据. 因此这样的情况下, type 的值是 \"),r(\"code\",[e._v(\"index\")]),e._v(\", 并且 Extra 的值是 \"),r(\"code\",[e._v(\"Using index\")]),e._v(\".\")]),e._v(\" \"),r(\"h4\",{attrs:{id:\"_3-3-7-all\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-7-all\"}},[e._v(\"#\")]),e._v(\" 3.3.7 ALL\")]),e._v(\" \"),r(\"p\",[e._v(\"ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. 如一个查询是 ALL 类型查询, 那么一般来说可以对相应的字段添加索引来避免.\\n下面是一个全表扫描的例子, 可以看到, 在全表扫描时, possible_keys 和 key 字段都是 NULL, 表示没有使用到索引, 并且 rows 十分巨大, 因此整个查询效率是十分低下的.\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT age FROM  user_info WHERE age = 20 \\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: user_info\\n   partitions: NULL\\n         type: ALL\\npossible_keys: NULL\\n          key: NULL\\n      key_len: NULL\\n          ref: NULL\\n         rows: 10\\n     filtered: 10.00\\n        Extra: Using where\\n1 row in set, 1 warning (0.00 sec)\\n\\n\")])])]),r(\"h4\",{attrs:{id:\"type类型性能比较\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#type类型性能比较\"}},[e._v(\"#\")]),e._v(\" type类型性能比较\")]),e._v(\" \"),r(\"p\",[e._v(\"通常来说, 不同的 type 类型的性能关系如下:\\n\"),r(\"code\",[e._v(\"ALL < index < range ~ index_merge < ref < eq_ref < const < system\")]),e._v(\" \"),r(\"code\",[e._v(\"ALL\")]),e._v(\" 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的.\\n而 \"),r(\"code\",[e._v(\"index\")]),e._v(\" 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快.\\n后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了.\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-4-possible-keys\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-possible-keys\"}},[e._v(\"#\")]),e._v(\" 3.4 possible_keys\")]),e._v(\" \"),r(\"p\",[r(\"code\",[e._v(\"possible_keys\")]),e._v(\" 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 \"),r(\"code\",[e._v(\"possible_keys\")]),e._v(\" 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 \"),r(\"code\",[e._v(\"key\")]),e._v(\" 字段决定.\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-5-key-重要\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-5-key-重要\"}},[e._v(\"#\")]),e._v(\" 3.5 key(重要)\")]),e._v(\" \"),r(\"p\",[e._v(\"此字段是 MySQL 在当前查询时所真正使用到的索引.\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-6-key-len\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-key-len\"}},[e._v(\"#\")]),e._v(\" 3.6 key_len\")]),e._v(\" \"),r(\"p\",[e._v(\"表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.\\nkey_len 的计算规则如下:\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"字符串\\n\"),r(\"ul\",[r(\"li\",[e._v(\"char(n): n 字节长度\")]),e._v(\" \"),r(\"li\",[e._v(\"varchar(n): 如果是 utf8 编码, 则是 3 \"),r(\"em\",[e._v(\"n + 2字节; 如果是 utf8mb4 编码, 则是 4\")]),e._v(\" n + 2 字节.\")])])]),e._v(\" \"),r(\"li\",[e._v(\"数值类型:\\n\"),r(\"ul\",[r(\"li\",[e._v(\"TINYINT: 1字节\")]),e._v(\" \"),r(\"li\",[e._v(\"SMALLINT: 2字节\")]),e._v(\" \"),r(\"li\",[e._v(\"MEDIUMINT: 3字节\")]),e._v(\" \"),r(\"li\",[e._v(\"INT: 4字节\")]),e._v(\" \"),r(\"li\",[e._v(\"BIGINT: 8字节\")])])]),e._v(\" \"),r(\"li\",[e._v(\"时间类型\\n\"),r(\"ul\",[r(\"li\",[e._v(\"DATE: 3字节\")]),e._v(\" \"),r(\"li\",[e._v(\"TIMESTAMP: 4字节\")]),e._v(\" \"),r(\"li\",[e._v(\"DATETIME: 8字节\")])])]),e._v(\" \"),r(\"li\",[e._v(\"字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.\")])]),e._v(\" \"),r(\"p\",[e._v(\"我们来举两个简单的栗子:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM order_info WHERE user_id < 3 AND product_name = 'p1' AND productor = 'WHH' \\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: range\\npossible_keys: user_product_detail_index\\n          key: user_product_detail_index\\n      key_len: 9\\n          ref: NULL\\n         rows: 4\\n     filtered: 12.50\\n        Extra: Using where; Using index\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"p\",[e._v(\"上面的例子是从表 order_info 中查询指定的内容, 而我们从此表的建表语句中可以知道, 表 \"),r(\"code\",[e._v(\"order_info\")]),e._v(\" 有一个联合索引:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\\n\")])])]),r(\"p\",[e._v(\"不过此查询语句 \"),r(\"code\",[e._v(\"WHERE user_id < 3 AND product_name = 'p1' AND productor = 'WHH'\")]),e._v(\" 中, 因为先进行 user_id 的范围查询, 而根据 \"),r(\"code\",[e._v(\"最左前缀匹配\")]),e._v(\" 原则, 当遇到范围查询时, 就停止索引的匹配, 因此实际上我们使用到的索引的字段只有 \"),r(\"code\",[e._v(\"user_id\")]),e._v(\", 因此在 \"),r(\"code\",[e._v(\"EXPLAIN\")]),e._v(\" 中, 显示的 key_len 为 9. 因为 user_id 字段是 BIGINT, 占用 8 字节, 而 NULL 属性占用一个字节, 因此总共是 9 个字节. 若我们将user_id 字段改为 \"),r(\"code\",[e._v(\"BIGINT(20) NOT NULL DEFAULT '0'\")]),e._v(\", 则 key_length 应该是8.\")]),e._v(\" \"),r(\"p\",[e._v(\"上面因为 \"),r(\"code\",[e._v(\"最左前缀匹配\")]),e._v(\" 原则, 我们的查询仅仅使用到了联合索引的 \"),r(\"code\",[e._v(\"user_id\")]),e._v(\" 字段, 因此效率不算高.\")]),e._v(\" \"),r(\"p\",[e._v(\"接下来我们来看一下下一个例子:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM order_info WHERE user_id = 1 AND product_name = 'p1' \\\\G;\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: ref\\npossible_keys: user_product_detail_index\\n          key: user_product_detail_index\\n      key_len: 161\\n          ref: const,const\\n         rows: 1\\n     filtered: 100.00\\n        Extra: Using index\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"p\",[e._v(\"这次的查询中, 我们没有使用到范围查询, key_len 的值为 161. 为什么呢? 因为我们的查询条件 \"),r(\"code\",[e._v(\"WHERE user_id = 1 AND product_name = 'p1'\")]),e._v(\" 中, 仅仅使用到了联合索引中的前两个字段, 因此 \"),r(\"code\",[e._v(\"keyLen(user_id) + keyLen(product_name) = 9 + 50 * 3 + 2 = 161\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-7-rows-重要\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-rows-重要\"}},[e._v(\"#\")]),e._v(\" 3.7 rows（重要）\")]),e._v(\" \"),r(\"p\",[e._v(\"rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.\\n这个值非常直观显示 SQL 的效率好坏, \"),r(\"strong\",[e._v(\"原则上 rows 越少越好.\")])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"_3-8-extra\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-8-extra\"}},[e._v(\"#\")]),e._v(\" 3.8 Extra\")]),e._v(\" \"),r(\"p\",[e._v(\"EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[e._v(\"Using filesort\\n当 Extra 中有 \"),r(\"code\",[e._v(\"Using filesort\")]),e._v(\" 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 \"),r(\"code\",[e._v(\"Using filesort\")]),e._v(\", 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.\")]),e._v(\" \"),r(\"p\",[e._v(\"例如下面的例子:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM order_info ORDER BY product_name \\\\G\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: index\\npossible_keys: NULL\\n          key: user_product_detail_index\\n      key_len: 254\\n          ref: NULL\\n         rows: 8\\n     filtered: 100.00\\n        Extra: Using index; Using filesort\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),r(\"p\",[e._v(\"我们的索引是\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)\\n\")])])]),r(\"p\",[e._v(\"但是上面的查询中根据 \"),r(\"code\",[e._v(\"product_name\")]),e._v(\" 来排序, 因此不能使用索引进行优化, 进而会产生 \"),r(\"code\",[e._v(\"Using filesort\")]),e._v(\".\\n如果我们将排序依据改为 \"),r(\"code\",[e._v(\"ORDER BY user_id, product_name\")]),e._v(\", 那么就不会出现 \"),r(\"code\",[e._v(\"Using filesort\")]),e._v(\" 了. 例如:\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM order_info ORDER BY user_id, product_name \\\\G;\\n*************************** 1. row ***************************\\n           id: 1\\n  select_type: SIMPLE\\n        table: order_info\\n   partitions: NULL\\n         type: index\\npossible_keys: NULL\\n          key: user_product_detail_index\\n      key_len: 254\\n          ref: NULL\\n         rows: 8\\n     filtered: 100.00\\n        Extra: Using index\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"Using index\")]),e._v(\" \"),r(\"p\",[e._v('\"覆盖索引扫描\", 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错')])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"Using temporary\")]),e._v(\" \"),r(\"p\",[e._v(\"查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.\")])])]),e._v(\" \"),r(\"h2\",{attrs:{id:\"_4-总结一下\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-总结一下\"}},[e._v(\"#\")]),e._v(\" 4. 总结一下\")]),e._v(\" \"),r(\"p\",[e._v(\"我们可以通过Explain 语句来判断sql是否高效，是否用到了索引。\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[e._v(\"key：通过key的值为 \"),r(\"code\",[e._v(\"PRIMARY\")]),e._v(\" 则使用到了索引\")]),e._v(\" \"),r(\"li\",[e._v(\"rows：rows扫描的行数，越小越好\")]),e._v(\" \"),r(\"li\",[e._v(\"type：通过type的值判断查询是否高效，判断此次是全表扫描还是索引扫描\\n\"),r(\"ul\",[r(\"li\",[e._v(\"ALL < index < range ~ index_merge < ref < eq_ref < const < system\")])])])]),e._v(\" \"),r(\"h3\",{attrs:{id:\"参考文章\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[e._v(\"#\")]),e._v(\" 参考文章\")]),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000008131735\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"MySQL 性能优化神器 Explain 使用分析\"),r(\"OutboundLink\")],1)])])}),[],!1,null,null,null);n.default=s.exports},527:function(e,n,_){e.exports=_.p+\"assets/img/image-20190910230049046.90b7a465.png\"}}]);","extractedComments":[]}
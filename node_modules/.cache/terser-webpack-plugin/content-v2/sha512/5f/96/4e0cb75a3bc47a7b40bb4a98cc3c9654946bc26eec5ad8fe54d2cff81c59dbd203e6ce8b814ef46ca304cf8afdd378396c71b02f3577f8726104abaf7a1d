{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{1015:function(t,_,v){\"use strict\";v.r(_);var s=v(42),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"hotspot-虚拟机对象创建\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hotspot-虚拟机对象创建\"}},[t._v(\"#\")]),t._v(\" HotSpot 虚拟机对象创建\")]),t._v(\" \"),s(\"p\",[t._v(\"本章介绍HotSpot 虚拟机在Java堆中对象分配、布局和访问的全过程\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1-对象的创建\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-对象的创建\"}},[t._v(\"#\")]),t._v(\" 1. 对象的创建\")]),t._v(\" \"),s(\"p\",[t._v(\"下图便是 Java 对象的创建过程（需默写，并掌握每一步）\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:v(389),alt:\"image-20190924224402145\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-1-step1-类加载检查\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-step1-类加载检查\"}},[t._v(\"#\")]),t._v(\" 1.1 Step1: 类加载检查\")]),t._v(\" \"),s(\"p\",[t._v(\"虚拟机遇到一条new指令时，首先将去检查这个指定的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表类是否已被加载过，解析和初始化过。如果没有，那必须先执行相应的类加载过程\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-2-step2-分配内存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-step2-分配内存\"}},[t._v(\"#\")]),t._v(\" 1.2 Step2：分配内存\")]),t._v(\" \"),s(\"p\",[t._v(\"在\"),s(\"strong\",[t._v(\"类加载检查\")]),t._v(\"通过后，接下来虚拟机将为新生对象\"),s(\"strong\",[t._v(\"分配内存\")]),t._v(\"。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。\"),s(\"strong\",[t._v(\"分配方式\")]),t._v(\"有 \"),s(\"strong\",[t._v(\"“指针碰撞”\")]),t._v(\" 和 \"),s(\"strong\",[t._v(\"“空闲列表”\")]),t._v(\" 两种，\"),s(\"strong\",[t._v(\"选择那种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定\")]),t._v(\"。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-1-分配内存的两种方式-需要掌握\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-1-分配内存的两种方式-需要掌握\"}},[t._v(\"#\")]),t._v(\" 1.2.1 分配内存的两种方式（需要掌握）\")]),t._v(\" \"),s(\"p\",[t._v('选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是\"标记-清除\"，还是\"标记-整理\"（也称作\"标记-压缩\"），值得注意的是，复制算法内存也是规整的')]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:v(390),alt:\"image-20190924225850663\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-2-内存分配并发问题-需要掌握\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-2-内存分配并发问题-需要掌握\"}},[t._v(\"#\")]),t._v(\" 1.2.2 \"),s(\"strong\",[t._v(\"内存分配并发问题\")]),t._v(\"（需要掌握）\")]),t._v(\" \"),s(\"p\",[t._v(\"在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"CAS+失败重试：\")]),t._v(\" CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。\"),s(\"strong\",[t._v(\"虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TLAB：\")]),t._v(\" 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-3-step3-初始化零值\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-step3-初始化零值\"}},[t._v(\"#\")]),t._v(\" 1.3 Step3:初始化零值\")]),t._v(\" \"),s(\"p\",[t._v(\"内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-4-step4-设置对象头\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-step4-设置对象头\"}},[t._v(\"#\")]),t._v(\" 1.4 Step4:设置对象头\")]),t._v(\" \"),s(\"p\",[t._v(\"初始化零值完成之后，\"),s(\"strong\",[t._v(\"虚拟机要对对象进行必要的设置\")]),t._v(\"，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 \"),s(\"strong\",[t._v(\"这些信息存放在对象头中。\")]),t._v(\" 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-5-step5-执行-init-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-step5-执行-init-方法\"}},[t._v(\"#\")]),t._v(\" 1.5 Step5:执行 init 方法\")]),t._v(\" \"),s(\"p\",[t._v(\"在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，\"),s(\"code\",[t._v(\"<init>\")]),t._v(\" 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 \"),s(\"code\",[t._v(\"<init>\")]),t._v(\" 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-对象的内存布局\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-对象的内存布局\"}},[t._v(\"#\")]),t._v(\" 2. 对象的内存布局\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：\"),s(\"strong\",[t._v(\"对象头\")]),t._v(\"、\"),s(\"strong\",[t._v(\"实例数据\")]),t._v(\"和\"),s(\"strong\",[t._v(\"对齐填充\")]),t._v(\"。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"对象头\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Hotspot 虚拟机的对象头包括两部分信息\")]),t._v(\"，\"),s(\"strong\",[t._v(\"第一部分用于存储对象自身的自身运行时数据\")]),t._v(\"（哈希码、GC 分代年龄、锁状态标志等等），\"),s(\"strong\",[t._v(\"另一部分是类型指针\")]),t._v(\"，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"实例数据\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"实例数据部分是对象真正存储的有效信息\")]),t._v(\"，也是在程序中所定义的各种类型的字段内容。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"对齐填充部分\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。\")]),t._v(\" 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3-对象的访问定位\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-对象的访问定位\"}},[t._v(\"#\")]),t._v(\" 3. 对象的访问定位\")]),t._v(\" \"),s(\"p\",[t._v(\"建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有\"),s(\"strong\",[t._v(\"①使用句柄\")]),t._v(\"和\"),s(\"strong\",[t._v(\"②直接指针\")]),t._v(\"两种：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"句柄：\")]),t._v(\" 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:v(391),alt:\"image-20190924232328745\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"2.直接指针：\")]),t._v(\" 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:v(392),alt:\"image-20190924232354100\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。\")])])])}),[],!1,null,null,null);_.default=a.exports},389:function(t,_,v){t.exports=v.p+\"assets/img/image-20190924224402145.947b8036.png\"},390:function(t,_,v){t.exports=v.p+\"assets/img/image-20190924225850663.e4036fb8.png\"},391:function(t,_,v){t.exports=v.p+\"assets/img/image-20190924232328745.9ff0c228.png\"},392:function(t,_,v){t.exports=v.p+\"assets/img/image-20190924232354100.1527a615.png\"}}]);","extractedComments":[]}
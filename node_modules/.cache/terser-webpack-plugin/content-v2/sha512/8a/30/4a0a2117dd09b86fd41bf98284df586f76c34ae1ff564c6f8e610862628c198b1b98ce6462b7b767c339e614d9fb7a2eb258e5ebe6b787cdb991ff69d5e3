{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{1096:function(a,n,t){\"use strict\";t.r(n);var r=t(42),e=Object(r.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"spring-bean常见问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-bean常见问题\"}},[a._v(\"#\")]),a._v(\" Spring Bean常见问题\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_1-什么是spring-bean\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-什么是spring-bean\"}},[a._v(\"#\")]),a._v(\" 1. 什么是Spring Bean？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"Bean 由Spring IoC 容器实例化，配置、装配和管理\")]),a._v(\" \"),t(\"li\",[a._v(\"Bean 是基于用户提供给IoC 容器的配置元数据Bean Definition 创建\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_2-spring-有哪些配置方式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-spring-有哪些配置方式\"}},[a._v(\"#\")]),a._v(\" 2. Spring 有哪些配置方式\")]),a._v(\" \"),t(\"p\",[a._v(\"单纯从Spring Framework 提供的方式，一共有三种：\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"XML 配置文件\")]),a._v(\" \"),t(\"li\",[a._v(\"注解配置\")]),a._v(\" \"),t(\"li\",[a._v(\"Java Config 配置\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_3-解释什么叫延迟加载\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-解释什么叫延迟加载\"}},[a._v(\"#\")]),a._v(\" 3. 解释什么叫延迟加载？\")]),a._v(\" \"),t(\"p\",[a._v(\"默认情况下，容器启动之后会将所有作用域为\"),t(\"strong\",[a._v(\"单例\")]),a._v(\"的 Bean 都创建好，但是有的业务场景我们并不需要它提前都创建好。此时，我们可以在Bean 中设置 \"),t(\"code\",[a._v('lzay-init = \"true\"')]),a._v(\" 。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"这样，当容器启动之后，作用域为单例的 Bean ，就不在创建。\")]),a._v(\" \"),t(\"li\",[a._v(\"而是在获得该 Bean 时，才真正在创建加载。\")])])])}),[],!1,null,null,null);n.default=e.exports}}]);","extractedComments":[]}
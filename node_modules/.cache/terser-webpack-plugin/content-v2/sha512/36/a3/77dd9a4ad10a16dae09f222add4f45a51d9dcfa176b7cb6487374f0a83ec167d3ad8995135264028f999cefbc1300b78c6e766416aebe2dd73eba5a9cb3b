{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{960:function(a,t,s){\"use strict\";s.r(t);var p=s(42),e=Object(p.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"hashmap相关问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashmap相关问题\"}},[a._v(\"#\")]),a._v(\" HashMap相关问题\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_1-hashmap中相关概念\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-hashmap中相关概念\"}},[a._v(\"#\")]),a._v(\" 1. HashMap中相关概念\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[a._v(\"size：\")]),a._v(\" \"),s(\"p\",[a._v(\"表示HashMap中存放KV数量（为链表和树中的KV的总和）\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"capacity（容量）\")]),a._v(\" \"),s(\"p\",[a._v(\"capacity就是指HashMap中桶的数量，默认值为16，\"),s(\"strong\",[a._v(\"容量都是2的幂\")])])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"loadFactor（装载因子）\")]),a._v(\" \"),s(\"p\",[a._v(\"装载因子用来衡量HashMap满的程度，loadFactor的默认值为0.75f。计算HashMap的实时装载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"threshold：\")]),a._v(\" \"),s(\"p\",[a._v(\"表示当HashMap的size大于threshold时会执行resize操作。\")])])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_2-假如我们需要存500个数需要多大的hashmap\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-假如我们需要存500个数需要多大的hashmap\"}},[a._v(\"#\")]),a._v(\" 2. 假如我们需要存500个数需要多大的HashMap?\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[a._v(\"HashMap 默认的初始化大小为16，之后每次扩充，变为原来的2倍\")]),a._v(\" \"),s(\"p\",[a._v(\"需要存储500个数，那么至少512个的容量。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"又因为HashMap每次put操作都会检查一遍size（当前容量）> initailCapacity*loadFactor。\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[a._v(\"默认的负载因子为0.75\")]),a._v(\" \"),s(\"p\",[a._v(\"500已经大于512*0.75=384，\"),s(\"strong\",[a._v(\"所以还需要自动扩容到1024\")])])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"更改负载因子为1\")]),a._v(\" \"),s(\"p\",[a._v(\"那么只需要512个空间\")])])])])]),a._v(\" \"),s(\"p\",[a._v(\"PS: 特殊情况HashMap的数还有可能都打在一个槽上，我们这里以每个都不一样为例\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v('   @Test\\n    public void test02() throws Exception {\\n        HashMap<Object,Object> map = new HashMap<>();\\n        for (int i = 0;i<500;i++){\\n            map.put(i,i);\\n        }\\n        // 通过反射获取容量变量capacity,并调用map对象\\n        Method capacity = map.getClass().getDeclaredMethod(\"capacity\");\\n        capacity.setAccessible(true);\\n        Integer realCapacity = (Integer) capacity.invoke(map);\\n        // HashMap插入500个数，实际容量为1024\\n        System.out.println(\"HashMap插入500个数，实际容量为\" + realCapacity);\\n    }\\n')])])]),s(\"h2\",{attrs:{id:\"_3-hashmap的负载因子\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-hashmap的负载因子\"}},[a._v(\"#\")]),a._v(\" 3. HashMap的负载因子\")]),a._v(\" \"),s(\"p\",[a._v(\"HashMap默认的负载因子为0.75\")])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}
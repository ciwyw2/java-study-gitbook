{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{351:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827230726717.ffe3c4e6.png\"},352:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827231956772.da046584.png\"},353:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827232500799.d14193ad.png\"},354:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827232605700.b684f864.png\"},355:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827234440202.a8b537d6.png\"},356:function(t,e,r){t.exports=r.p+\"assets/img/image-20190827234845236.5d218c77.png\"},929:function(t,e,r){\"use strict\";r.r(e);var v=r(42),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"tomcat系统架构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tomcat系统架构\"}},[t._v(\"#\")]),t._v(\" Tomcat系统架构\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_1-学习目的\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-学习目的\"}},[t._v(\"#\")]),t._v(\" 1. 学习目的\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"Server、Service、Connector、Container四大组件之间的关系和联系，以及他们的主要功能点\")]),t._v(\" \"),v(\"li\",[t._v(\"Tomcat执行的整体架构、请求是如何被一步步处理的\")]),t._v(\" \"),v(\"li\",[t._v(\"Engine、Host、Context、Wrapper相关的概念关系\")]),t._v(\" \"),v(\"li\",[t._v(\"Container是如何处理请求的\")]),t._v(\" \"),v(\"li\",[t._v(\"Tomcat用到的相关设计模式\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_2-tomcat-顶层架构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-tomcat-顶层架构\"}},[t._v(\"#\")]),t._v(\" 2. Tomcat 顶层架构\")]),t._v(\" \"),v(\"p\",[t._v(\"Tomcat 顶层架构图，如下\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:r(351),alt:\"image-20190827230726717\"}})]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"Service\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"Tomcat 中最顶层的容器是Server，代表着整个服务器\")]),t._v(\" \"),v(\"li\",[t._v(\"一个Server可以包含至少一个Service，用于具体提供服务。\")])])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Service\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"主要组成（Tomcat的心脏的两个组件）\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"Connector\")]),t._v(\" \"),v(\"p\",[t._v(\"用于处理连接相关的事情，并提供Socket与Request和Response相关的转化\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Container\")]),t._v(\" \"),v(\"p\",[t._v(\"用于封装和管理Servlet，以及具体处理Request请求\")])])])])])])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_2-1-tomcat结构\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-tomcat结构\"}},[t._v(\"#\")]),t._v(\" 2.1 tomcat结构\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"一个Tomcat中只有一个Server，\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"一个Server可以包含多个Service，\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"一个Service只有一个Container，\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"但是可以有多个Connectors，这是因为一个服务可以有多个连接。\")]),t._v(\" \"),v(\"p\",[t._v(\"如同时提供Http和Https链接，也可以提供向相同协议不同端口的连接，示意图如下：\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:r(352),alt:\"image-20190827231956772\"}})]),t._v(\" \"),v(\"p\",[t._v(\"多个Connector 和一个Container 就形成一个Service，有了Service就可以对外提供服务了，但是还要一个生存环境，必须要有人能够给他生命，掌握其生死大权，那就非Server莫属了！所以整个Tomcat有Server控制\")])])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_3-server-xml配置文件\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-server-xml配置文件\"}},[t._v(\"#\")]),t._v(\" 3. server.xml配置文件\")]),t._v(\" \"),v(\"p\",[t._v(\"上述关系都可以从server.xml看出\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:r(353),alt:\"image-20190827232500799\"}})]),t._v(\" \"),v(\"p\",[t._v(\"配置文件对应的结构图\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:r(354),alt:\"image-20190827232605700\"}})]),t._v(\" \"),v(\"p\",[t._v(\"结构图解析\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v('Server标签设置的端口为8005，shutdown=“SHUTDOWN\",')]),t._v(\" \"),v(\"p\",[t._v(\"表示在8005端口监听”SHUTDOWN“命令，如果收到了就会关闭Tomcat\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Container\")]),t._v(\" \"),v(\"p\",[t._v(\"Service左边的内容都是属于Container（Engine等）\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Service\")]),t._v(\" \"),v(\"p\",[t._v(\"Service下边是Connector\")])])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_4-tomcat顶层架构小结\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-tomcat顶层架构小结\"}},[t._v(\"#\")]),t._v(\" 4. Tomcat顶层架构小结\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[v(\"p\",[t._v(\"Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个Connector和一个Container；\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Server掌管着整个Tomcat的生死大权；\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Service 是对外提供服务的；\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Connector用于接受请求并将请求封装成Request和Response来具体处理；\")])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"Container用于封装和管理Servlet，以及具体处理request请求；\")])])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_5-connector和container的关系\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-connector和container的关系\"}},[t._v(\"#\")]),t._v(\" 5.Connector和Container的关系\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_5-1-tomcat网络请求流程\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-1-tomcat网络请求流程\"}},[t._v(\"#\")]),t._v(\" 5.1 Tomcat网络请求流程\")]),t._v(\" \"),v(\"p\",[t._v(\"一个请求发送到Tomcat之后\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"首先经过Service然后交给Connector\")]),t._v(\" \"),v(\"li\",[t._v(\"Connector 用于接受请求并将接收到的请求封装为Request和Response来具体处理，request和response封装完之后再交由Container进行处理\")]),t._v(\" \"),v(\"li\",[t._v(\"Container处理完请求之后再返回给Connector\")]),t._v(\" \"),v(\"li\",[t._v(\"最后再由Connector通过Socket将处理的结果返回给客户端\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_5-2-connector\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-2-connector\"}},[t._v(\"#\")]),t._v(\" 5.2 Connector\")]),t._v(\" \"),v(\"p\",[t._v(\"Connector 最底层使用的事Socket来进行封装的，Request和Response 是按照Http协议来封装的，所以Connector同时需要实现TCP/IP协议和Http协议\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_5-3-container架构分析\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-3-container架构分析\"}},[t._v(\"#\")]),t._v(\" 5.3 Container架构分析\")]),t._v(\" \"),v(\"p\",[t._v(\"Container 用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个自容器\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:r(355),alt:\"image-20190827234440202\"}})]),t._v(\" \"),v(\"h4\",{attrs:{id:\"_5-3-1-4个子容器的作用\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-3-1-4个子容器的作用\"}},[t._v(\"#\")]),t._v(\" 5.3.1  4个子容器的作用\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[t._v(\"Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine\")]),t._v(\" \"),v(\"li\",[t._v(\"Host: 代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点\")]),t._v(\" \"),v(\"li\",[t._v(\"Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面web.xml文件\")]),t._v(\" \"),v(\"li\",[t._v(\"Wrapper：每一个Wrapper封装这一个Servlet\")])]),t._v(\" \"),v(\"p\",[t._v(\"tomcat的文件目录对照，如下图\"),v(\"img\",{attrs:{src:r(356),alt:\"image-20190827234845236\"}})]),t._v(\" \"),v(\"p\",[t._v(\"Context和Host的区别是Context表示一个应用，我们的tomcat中默认的配置下webapps下的每一个文件夹目录是一个Context，其中ROOT目录存放着主应用，其他目录存放着子应用，而珍格格webapps就是一个Host站点\")]),t._v(\" \"),v(\"p\",[t._v(\"我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：\"),v(\"code\",[t._v(\"www.isture.com\")]),t._v(\"，如果是Host（webapps）下的其他应用，则可以使用\"),v(\"code\",[t._v(\"www.isture.com/docs\")]),t._v(\"进行访问，当然默认指定的根应用ROOT可以进行设置，\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"_5-4-container-如何处理请求\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-4-container-如何处理请求\"}},[t._v(\"#\")]),t._v(\" 5.4 Container 如何处理请求\")]),t._v(\" \"),v(\"p\",[t._v(\"Container处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）\")]),t._v(\" \"),v(\"p\",[t._v(\"Pipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的请求返回，再让下一个处理着继续处理。\")])])}),[],!1,null,null,null);e.default=a.exports}}]);","extractedComments":[]}
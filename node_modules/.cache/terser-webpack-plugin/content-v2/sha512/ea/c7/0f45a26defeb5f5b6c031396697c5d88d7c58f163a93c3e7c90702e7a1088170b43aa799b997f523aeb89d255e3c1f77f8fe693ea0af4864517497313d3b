{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{930:function(s,o,e){\"use strict\";e.r(o);var t=e(42),i=Object(t.a)({},(function(){var s=this,o=s.$createElement,e=s._self._c||o;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"会话机制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#会话机制\"}},[s._v(\"#\")]),s._v(\" 会话机制\")]),s._v(\" \"),e(\"p\",[s._v(\"Web程序中常用的技术，用来\"),e(\"strong\",[s._v(\"跟踪用户的整个会话\")]),s._v(\"。常用的会话跟踪技术是Cookie与Session。\"),e(\"strong\",[s._v(\"Cookie通过在客户端记录信息确定用户身份\")]),s._v(\"，\"),e(\"strong\",[s._v(\"Session通过在服务器端记录信息确定用户身份\")]),s._v(\"。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"cookie和session之间的区别和联系-例子\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cookie和session之间的区别和联系-例子\"}},[s._v(\"#\")]),s._v(\" Cookie和Session之间的区别和联系(例子)\")]),s._v(\" \"),e(\"p\",[s._v(\"假如一个咖啡店有喝5杯咖啡免费赠一杯咖啡的优惠，然而一次性消费5杯咖啡的机会微乎其微，这时就需要某种方式来纪录某位顾客的消费数量。想象一下其实也无外乎下面的几种方案：\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[s._v(\"该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道该怎么对待了。这种做法就是协议本身支持状态。但是http协议本身是无状态的\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。这种做法就是在客户端保持状态。也就是cookie。 顾客就相当于浏览器，cookie如何工作，下面会详细讲解\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的纪录本上找到这个卡号对应的纪录添加一些消费信息。这种做法就是在服务器端保持状态。\")])])]),s._v(\" \"),e(\"p\",[s._v(\"由于HTTP协议是无状态的，而出于种种考虑也不希望使之成为有状态的，因此，后面两种方案就成为现实的选择。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择\")])])}),[],!1,null,null,null);o.default=i.exports}}]);","extractedComments":[]}
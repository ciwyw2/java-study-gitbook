{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{1075:function(a,t,n){\"use strict\";n.r(t);var e=n(42),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"条件化的bean\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件化的bean\"}},[a._v(\"#\")]),a._v(\" 条件化的bean\")]),a._v(\" \"),n(\"p\",[a._v(\"有些bean 我们只想在特定情况下创建，我们可以使用@Conditional注解\")]),a._v(\" \"),n(\"p\",[n(\"strong\",[a._v(\"作用域\")]),a._v(\"：用来带有@Bean注解的方法上\")]),a._v(\" \"),n(\"p\",[n(\"strong\",[a._v(\"作用效果\")]),a._v(\"：\")]),a._v(\" \"),n(\"p\",[a._v(\"​\\t如果给定的条件计算结果为true，就会创建这个bean，否则这个bean 会被忽略\")]),a._v(\" \"),n(\"h2\",{attrs:{id:\"实例\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例\"}},[a._v(\"#\")]),a._v(\" 实例\")]),a._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[a._v(\"@Bean\\n@Conditional(MagocExistsConfitional.class)//条件化创建bean\\npublic MagicBean magicBean(){\\n    retrun new MagicBean();\\n}\\n\")])])]),n(\"p\",[a._v(\"设置给Conditiona的类可以是实现任意实现Condition 的接口\")]),a._v(\" \"),n(\"p\",[a._v(\"Condition接口类\")]),a._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[a._v(\"public interface Condition {\\n    boolean matches(ConditionContext var1, AnnotatedTypeMetadata var2);\\n}\\n\")])])]),n(\"p\",[a._v(\"该接口实现起来简单直接，只需要提供matches() 方法的实现即可，如果返回true，那么久会创建带有@Conditionl 注解的bean，否则不会创建\")]),a._v(\" \"),n(\"p\",[a._v(\"处理自动装配的歧义性\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}
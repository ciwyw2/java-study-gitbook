{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{969:function(e,n,r){\"use strict\";r.r(n);var t=r(42),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"executors创建线程池\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#executors创建线程池\"}},[e._v(\"#\")]),e._v(\" Executors创建线程池\")]),e._v(\" \"),r(\"p\",[e._v(\"Executors类中提供的几个静态方法来创建线程池：\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"Executors.newCachedThreadPool();        //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE\\nExecutors.newSingleThreadExecutor();   //创建容量为1的缓冲池\\nExecutors.newFixedThreadPool(int);    //创建固定容量大小的缓冲池\\n\")])])]),r(\"p\",[e._v(\"三个静态方法的具体实现\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[e._v(\"public static ExecutorService newFixedThreadPool(int nThreads) {\\n    return new ThreadPoolExecutor(nThreads, nThreads,\\n                                  0L, TimeUnit.MILLISECONDS,\\n                                  new LinkedBlockingQueue<Runnable>());\\n}\\npublic static ExecutorService newSingleThreadExecutor() {\\n    return new FinalizableDelegatedExecutorService\\n        (new ThreadPoolExecutor(1, 1,\\n                                0L, TimeUnit.MILLISECONDS,\\n                                new LinkedBlockingQueue<Runnable>()));\\n}\\npublic static ExecutorService newCachedThreadPool() {\\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\\n                                  60L, TimeUnit.SECONDS,\\n                                  new SynchronousQueue<Runnable>());\\n}\\n\")])])]),r(\"p\",[e._v(\"从它们的具体实现来看，它们实际上也是调用了ThreadPoolExecutor，只不过参数都已配置好了。\")]),e._v(\" \"),r(\"p\",[e._v(\"newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的LinkedBlockingQueue；\")]),e._v(\" \"),r(\"p\",[e._v(\"newSingleThreadExecutor将corePoolSize和maximumPoolSize都设置为1，也使用的LinkedBlockingQueue；\")]),e._v(\" \"),r(\"p\",[e._v(\"newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，使用的SynchronousQueue，也就是说来了任务就创建线程运行，当线程空闲超过60秒，就销毁线程。\")])])}),[],!1,null,null,null);n.default=o.exports}}]);","extractedComments":[]}
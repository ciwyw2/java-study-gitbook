{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[442],{897:function(a,t,s){\"use strict\";s.r(t);var e=s(42),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"maven核心知识\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#maven核心知识\"}},[a._v(\"#\")]),a._v(\" Maven核心知识\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_1-maven-简介\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-maven-简介\"}},[a._v(\"#\")]),a._v(\" 1. Maven 简介\")]),a._v(\" \"),s(\"p\",[a._v(\"Maven 是一个项目管理工具，他包含了\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"一个项目对象模型（Project Object Model）\")]),a._v(\" \"),s(\"li\",[a._v(\"一组标准集合\")]),a._v(\" \"),s(\"li\",[a._v(\"一个项目生命周期（Project Lifecycle）\")]),a._v(\" \"),s(\"li\",[a._v(\"一个依赖管理系统（Dependency Management System）\")]),a._v(\" \"),s(\"li\",[a._v(\"和用来运行定义在生命周期阶段（phase）中的插件（pulgin）目标（goal）的逻辑\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_2-核心功能\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-核心功能\"}},[a._v(\"#\")]),a._v(\" 2. 核心功能\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"依赖管理：Maven工程对jar包的管理过程\")]),a._v(\" \"),s(\"li\",[a._v(\"项目构建\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_3-仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-仓库\"}},[a._v(\"#\")]),a._v(\" 3. 仓库\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"本地仓库\")]),a._v(\" \"),s(\"li\",[a._v(\"远程仓库（私服）\")]),a._v(\" \"),s(\"li\",[a._v(\"中央仓库\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_4-maven-常用命令\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-maven-常用命令\"}},[a._v(\"#\")]),a._v(\" 4. Maven 常用命令\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"clean：删除项目中已经编译好的信息，删除target目录\")]),a._v(\" \"),s(\"li\",[a._v(\"compile：Maven工程的编译命令，用于编译项目的源代码，将\"),s(\"code\",[a._v(\"src/main/java\")]),a._v(\"下的文件编译成class文件输出到target目录下\")]),a._v(\" \"),s(\"li\",[a._v(\"test：使用合适的单元测试框架运行测试\")]),a._v(\" \"),s(\"li\",[a._v(\"package：将编译好的代码打包成可分发的格式，如jar，war\")]),a._v(\" \"),s(\"li\",[a._v(\"install：安装包至本地仓库，已备本地的其它项目作为依赖使用\")]),a._v(\" \"),s(\"li\",[a._v(\"deploy: 复制最终的包至远程仓库，共享给其他开发人员和项目（通常和一次正式发布相关）\")])]),a._v(\" \"),s(\"p\",[a._v(\"每一个构建项目的命令都对应了maven底层一个插件\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_5-maven命令package、install、deploy-的联系和区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-maven命令package、install、deploy-的联系和区别\"}},[a._v(\"#\")]),a._v(\" 5. Maven命令package、install、deploy 的联系和区别\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[a._v(\"mvn clean package：\")]),a._v(\" \"),s(\"p\",[a._v(\"依次执行了clean、resources、compile、testResources、testCompile、test、jar（打包）等七个阶段\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"mvn clean install：\")]),a._v(\" \"),s(\"p\",[a._v(\"依次执行了 clean、resources、compile、testResuources、testComplie、jar（打包）、install 等8个阶段\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"mvn clean deploy:\")]),a._v(\" \"),s(\"p\",[a._v(\"依次执行了clean、resources、compile、testResuources、testComplie、jar（打包）、install、deploy等9个阶段\")])])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"主要区别：\")]),a._v(\"\\npackage命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。\")]),a._v(\" \"),s(\"p\",[a._v(\"install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库。\")]),a._v(\" \"),s(\"p\",[a._v(\"deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_6-maven-生命周期\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-maven-生命周期\"}},[a._v(\"#\")]),a._v(\" 6. Maven 生命周期\")]),a._v(\" \"),s(\"p\",[a._v(\"清理生命周期：运行 mvn clean 将调用清理生命周期\")]),a._v(\" \"),s(\"p\",[a._v(\"默认生命周期：是一个软件应用程序构建过程的总体模型\")]),a._v(\" \"),s(\"p\",[a._v(\"compile、test、package、install、deploy\")]),a._v(\" \"),s(\"p\",[a._v(\"站点生命周期：为一个或者一组项目生成项目文档和报告，使用较少。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_7-maven-依赖范围\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-maven-依赖范围\"}},[a._v(\"#\")]),a._v(\" 7. Maven 依赖范围\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[a._v(\"complie：默认范围、编译测试运行都有效\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"provided：编译和运行有效，最后在运行的时候不会加入\")]),a._v(\" \"),s(\"p\",[a._v(\"官方举了一个例子。比如在JavaEE web项目中我们需要使用servlet的API，但是Tomcat中已经提供这个jar，我们在编译和测试的时候需要使用这个api，但是部署到tomcat的时候，如果还加入servlet构建就会产生冲突，这个时候就可以使用provided。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"runtime：测试和运行有效\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"test：测试有效\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"system：与本机系统关联，编译和测试时有效\")])])]),a._v(\" \"),s(\"p\",[a._v(\"-　import：导入的范围，它只在使用dependencyManagement中，表示从其他pom中导入dependecy的配置。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_8-依赖冲突\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-依赖冲突\"}},[a._v(\"#\")]),a._v(\" 8. 依赖冲突\")]),a._v(\" \"),s(\"p\",[a._v(\"每个显示申明的类包都会依赖于一些其它的隐式类，这些隐式的类包会被maven间接依赖进来，因而可能造成一个我们不想要的类包的载入，严重的甚至会引起类包之间的冲突\")]),a._v(\" \"),s(\"p\",[a._v(\"要解决这个问题，首先就是要查看pom.xml 显式和隐式的依赖类包，然后通过这个类包树找出我们不想要的依赖类包，手工将其排除在外就可以了\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"exclusions\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"exclusion\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"artifactId\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"unitils-database\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"artifactId\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),a._v(\"groupId\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"org.unitils\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"groupId\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"exclusion\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"</\")]),a._v(\"exclusions\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\"  \\n\")])])]),s(\"h2\",{attrs:{id:\"参考文章\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[a._v(\"#\")]),a._v(\" 参考文章\")]),a._v(\" \"),s(\"p\",[a._v(\"[\"),s(\"a\",{attrs:{href:\"https://www.cnblogs.com/sgh1023/p/10900130.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"Maven核心知识点梳理\"),s(\"OutboundLink\")],1),a._v(\"](https://www.cnblogs.com/sgh1023/p/10900130.html)\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{1009:function(t,e,a){\"use strict\";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"springmvc常见知识点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#springmvc常见知识点\"}},[t._v(\"#\")]),t._v(\" SpringMVC常见知识点\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1-spring-mvc-简介\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-spring-mvc-简介\"}},[t._v(\"#\")]),t._v(\" 1. Spring MVC 简介\")]),t._v(\" \"),s(\"p\",[t._v(\"Spring MVC 提供”模型-视图-控制器“（Model - View - Controller） 架构和随时可用的组件，用于开发灵活且松散耦合的Web应用程序。\")]),t._v(\" \"),s(\"p\",[t._v(\"MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和UI逻辑，同时在所有这些元素之间提供松散耦合\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-介绍下-spring-mvc-的核心组件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-介绍下-spring-mvc-的核心组件\"}},[t._v(\"#\")]),t._v(\" 2. 介绍下 Spring MVC 的核心组件？\")]),t._v(\" \"),s(\"p\",[t._v(\"Spring MVC 一共有九大核心组件，分别是：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"MultipartResolver\")]),t._v(\" \"),s(\"li\",[t._v(\"LocaleResolver\")]),t._v(\" \"),s(\"li\",[t._v(\"ThemeResolver\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"HandlerMapping\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"HandlerAdapter\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"HandlerExceptionResolver\")])]),t._v(\" \"),s(\"li\",[t._v(\"RequestToViewNameTransalator\")]),t._v(\" \"),s(\"li\",[t._v(\"ViewResolver\")]),t._v(\" \"),s(\"li\",[t._v(\"FlashMapManager\")])]),t._v(\" \"),s(\"p\",[t._v(\"虽然很多，但是最关键的只有HandlerMapping+HandlerAdapter+HandlerExceptionResolver\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3-描述一下-dispatcherservlet的工作流程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-描述一下-dispatcherservlet的工作流程\"}},[t._v(\"#\")]),t._v(\" 3. 描述一下 DispatcherServlet的工作流程？\")]),t._v(\" \"),s(\"p\",[t._v(\"DiapatcherServlet 的工作流程可以用一副图来说明\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:a(846),alt:\"image-20191101235522013\"}})]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"发送请求\")]),t._v(\" \"),s(\"p\",[t._v(\"用户向服务器发送HTTP请求，请求被 Spring MVC 的调度器 DispatherServlet 捕获\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"映射处理器（HandlerMapping）\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"DispatcherServlet 根据请求 URL,调用 HandlerMapping 获取该 Handler 配置的所有相关的对象\")]),t._v(\"（包括 Handler 对象以及 Handler 对象对应的拦截器），\"),s(\"strong\",[t._v(\"最后以 HandlerExecutionChain 对象的形式返回。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"既 HandlerExecutionChain 中，包含对应的Handler 对象和拦截器门\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HandlerExecutionChain\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getHandler\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"处理器适配（HandlerAdapter）\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"DispatcherServlet 根据获得的 Handler，选择一个合适的HandlerAdapter\")]),t._v(\"（注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的#preHandler(...)方法）\")]),t._v(\" \"),s(\"p\",[t._v(\"提取请求 Request 中的模型数据，填充 Handler 入参，开始执行Handler（Controller）。在填充Handler的入参过程中，根据你的配置，Spring 将帮你做一些额外的操作\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HttpMessageConverter：会将请求消息（如 JSON,XML 等数据）转换成一个对象\")]),t._v(\" \"),s(\"li\",[t._v(\"数据转换：对请求消息进行数据转换。如String 转换成Integer，Double等\")]),t._v(\" \"),s(\"li\",[t._v(\"数据格式化：对请求消息进行数据格式化。如将字符串转换成格式化数字或格式化日期等\")]),t._v(\" \"),s(\"li\",[t._v(\"数据验证： 验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Handler(Controller) 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象\")]),t._v(\"。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ModelAndView\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"handle\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"调用处理器方法\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"解析视图\")]),t._v(\" \"),s(\"p\",[t._v(\"根据返回的ModelAndView，选择一个合适的ViewResolver（必须是已经注册到Spring容器中的ViewResolver），解析出View 对象，然后返回给DispatcherServlet\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"View\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"resolveViewName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" viewName\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Locale\")]),t._v(\" locale\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"7渲染视图+响应请求\")]),t._v(\" \"),s(\"p\",[t._v(\"ViewResolver 结合Model 和View，来渲染视图，并写回给用户（浏览器）\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"render\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Nullable\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Map\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" model\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-1-前后端分离的spring-mvc-流程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-前后端分离的spring-mvc-流程\"}},[t._v(\"#\")]),t._v(\" 3.1 前后端分离的Spring MVC 流程\")]),t._v(\" \"),s(\"p\",[t._v(\"对于前后端分离的架构，Spring MVC 只负责 Model 和 Controller 两块，而将View 移交给了前端，所以，上图中的步骤5，6 两步，就不需要了\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"那么会变成什么样？\")])]),t._v(\" \"),s(\"p\",[t._v(\"步骤3中，如果Handler（Controller）执行完后，如果判断方法有@ResponseBody 注解，则直接将结果写回给浏览器\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"返回的是Java POJO  对象，HTTP是不支持的，怎么办？\")])]),t._v(\" \"),s(\"p\",[t._v(\"需要将结果使用HttpMessageConverter 进行转换后，才能返回。例如说，大家锁熟悉的 FastJsonHttpMessage，将POJO 转换成JSON 字符串返回\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_4-controller-注解有什么用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-controller-注解有什么用\"}},[t._v(\"#\")]),t._v(\" 4. @Controller 注解有什么用？\")]),t._v(\" \"),s(\"p\",[t._v(\"@Controller 注解，他将一个类标记为Spring MVC 控制器Controller\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_5-restcontroller-和-controller-有什么区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-restcontroller-和-controller-有什么区别\"}},[t._v(\"#\")]),t._v(\" 5. RestController 和 @Controller 有什么区别？\")]),t._v(\" \"),s(\"p\",[t._v(\"@RestController 注解，在@Controller 基础上，增加了@ResponseBody 注解，更加适合目前前后端分离的架构下，提供Restful API，返回例如JSON 数据格式。当然，\"),s(\"strong\",[t._v(\"返回什么样的格式\")]),t._v(\"，根据\"),s(\"strong\",[t._v(\"客户端的”Accept“请求头来决定\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_6-reuqestmapping-注解有什么用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-reuqestmapping-注解有什么用\"}},[t._v(\"#\")]),t._v(\" 6. @ReuqestMapping 注解有什么用？\")]),t._v(\" \"),s(\"p\",[t._v(\"@RequestMapping 注解，用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"类级别：映射请求的URL\")]),t._v(\" \"),s(\"li\",[t._v(\"方法级别：映射 URL 以及HTTP 请求方法\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_7-requestmapping-和-getmapping-注解的不同之处在哪里\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-requestmapping-和-getmapping-注解的不同之处在哪里\"}},[t._v(\"#\")]),t._v(\" 7. @RequestMapping 和@GetMapping 注解的不同之处在哪里\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"@RequestMapping 可注解在类和方法上，@GetMapping 仅可注册在方法上\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"@RequestMapping 可进行 GET、POST、PUT、DELETE 等请求方法;\")]),t._v(\" \"),s(\"p\",[t._v(\"@GetMapping 是 @RequestMapping 的GET 请求与方法的特例，目的是为了提高清晰度\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_8-返回json-格式使用什么注解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-返回json-格式使用什么注解\"}},[t._v(\"#\")]),t._v(\" 8. 返回JSON 格式使用什么注解？\")]),t._v(\" \"),s(\"p\",[t._v(\"可以使用@Response 注解，或者使用包含@ResponseBody 注解的@RestController 注解。\")]),t._v(\" \"),s(\"p\",[t._v(\"当然，还是需要配合相应的支持JSON格式化的HttpMessageConverter 实现类。例如，Spring MVC 默认使用MappingJackson2HttpMessageConverter\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_9-介绍一下webapplicationcontext\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-介绍一下webapplicationcontext\"}},[t._v(\"#\")]),t._v(\" 9. 介绍一下WebApplicationContext？\")]),t._v(\" \"),s(\"p\",[t._v(\"WebApplicationContext 是实现ApplicationContext 接口的子类，专门为Web应用准备的\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"他允许从相对于Web 根目录的路径中\"),s(\"strong\",[t._v(\"加载配置文件，完成初始化Spring MVC 组件的工作\")])]),t._v(\" \"),s(\"li\",[t._v(\"从WebApplicationContext中，可以获取ServletContext 引用，整个Web 应用上下文对象将作为属性放置在SerletContext中，一遍Web 应用环境可以访问Spring 上下文\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_10-spirng-mvc-的异常处理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-spirng-mvc-的异常处理\"}},[t._v(\"#\")]),t._v(\" 10.Spirng MVC 的异常处理？\")]),t._v(\" \"),s(\"p\",[t._v(\"Spring MVC 提供了异常解析器 HandlerExceptionResolver 接口，将处理器（handler）执行时发生的异常，解析（转换）成对应的ModelAndView 结果，代码如下\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HandlerExceptionResolver\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 解析异常，转换成对应的 ModelAndView 结果\\n     */\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Nullable\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ModelAndView\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"resolveException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Nullable\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" ex\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"_11-spring-mvc-有什么优点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-spring-mvc-有什么优点\"}},[t._v(\"#\")]),t._v(\" 11. Spring MVC 有什么优点？\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"使用非常\"),s(\"strong\",[t._v(\"方便\")]),t._v(\"，无论是添加HTTP请求方法映射的方法，还是不同数据格式的响应\")]),t._v(\" \"),s(\"li\",[t._v(\"提供\"),s(\"strong\",[t._v(\"拦截器机制\")]),t._v(\"，可以方便的对请求进行拦截处理\")]),t._v(\" \"),s(\"li\",[t._v(\"提供\"),s(\"strong\",[t._v(\"异常机制\")]),t._v(\"，可以方便的对异常做统一的处理\")]),t._v(\" \"),s(\"li\",[t._v(\"可以任意使用各种\"),s(\"strong\",[t._v(\"视图\")]),t._v(\"技术，而不仅仅局限于JSP，例如Freemarker、Thymeleaf等等\")]),t._v(\" \"),s(\"li\",[t._v(\"不依赖于Servlet API(目标虽是如此，但是在实现的时候确实是依赖于 Servlet 的，当然仅仅依赖 Servlet ，而不依赖 Filter、Listener )。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_12-spring-mvc怎样设定重定向和转发\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-spring-mvc怎样设定重定向和转发\"}},[t._v(\"#\")]),t._v(\" 12. Spring MVC怎样设定重定向和转发？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"结果转发：在返回值的前面加 \"),s(\"code\",[t._v('\"forward:/\"')]),t._v(\" 。\")]),t._v(\" \"),s(\"li\",[t._v(\"重定向：在返回值的前面加上 \"),s(\"code\",[t._v('\"redirect:/\"')]),t._v(\" 。\")])]),t._v(\" \"),s(\"p\",[t._v(\"当然，目前前后端分离之后，我们作为后端开发，已经很少有机会用上这个功能了。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_13-spring-mvc-的-controller-是不是单例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-spring-mvc-的-controller-是不是单例\"}},[t._v(\"#\")]),t._v(\" 13. Spring MVC 的 Controller 是不是单例？\")]),t._v(\" \"),s(\"p\",[t._v(\"绝大多数情况下,Controller \"),s(\"strong\",[t._v(\"是单例\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"那么，Controller 里一般\"),s(\"strong\",[t._v(\"不建议存在共享的变量\")])])])}),[],!1,null,null,null);e.default=n.exports},846:function(t,e,a){t.exports=a.p+\"assets/img/image-20191101235522013.5f1ad7e6.png\"}}]);","extractedComments":[]}
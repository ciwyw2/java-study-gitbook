{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{1282:function(t,a,e){\"use strict\";e.r(a);var r=e(42),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"zuul基础\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#zuul基础\"}},[t._v(\"#\")]),t._v(\" zuul基础\")]),t._v(\" \"),r(\"p\",[t._v(\"在微服务中，外部的应用如何来访问内部各种各样的微服务的呢？\"),r(\"strong\",[t._v(\"在微服务架构中，后端服务往往不直接开放给调用端，而是通过一个API 网关根据请求的url，路由到相应的服务\")]),t._v(\"。当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"_1-为什么需要api-gateway\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-为什么需要api-gateway\"}},[t._v(\"#\")]),t._v(\" 1. 为什么需要API Gateway\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[t._v(\"简化客户端调用复杂度\")]),t._v(\" \"),r(\"p\",[t._v(\"在微服务架构模式下后端服务的实例数一般是动态的，对于客户端而言很难发现动态改变的服务的访问地址信息。因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway 作为轻量级网关，同时API Gateway 中\"),r(\"strong\",[t._v(\"也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度\")])]),t._v(\" \"),r(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:e(703),alt:\"image-20191115220102366\"}})]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"数据裁剪以及聚合\")]),t._v(\" \"),r(\"p\",[t._v(\"通常而言不同的客户端对于显示时对于数据的需求是不一致的，比如手机端或者Web端又或者在低延迟的网络环境或者高延迟的网络环境\")]),t._v(\" \"),r(\"p\",[t._v(\"因此为了优化客户端的使用体验，API Gateway 可以对通用性的响应数据进行\"),r(\"strong\",[t._v(\"裁剪以适应不同客户端的使用需求\")]),t._v(\"。同时还将可以\"),r(\"strong\",[t._v(\"将API 调用逻辑进行聚合，从而减少客户端的请求数\")]),t._v(\"，优化客户端的用户体验\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"多渠道的支持\")]),t._v(\" \"),r(\"p\",[t._v(\"当然我们还可以针对不同的渠道和客户端提供不同的API Gateway，对于该模式的使用由另外一个大家熟知的方式叫Backend for front-end, 在Backend for front-end模式当中，我们\"),r(\"strong\",[t._v(\"可以针对不同的客户端分别创建其BFF\")])])])]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:e(704),alt:\"image-20191115220734859\"}})]),t._v(\" \"),r(\"ol\",{attrs:{start:\"4\"}},[r(\"li\",[r(\"p\",[t._v(\"遗留系统的微服务化改造\")]),t._v(\" \"),r(\"p\",[t._v(\"对于系统而言进行微服务改造通常是由于原有的系统存在或多或少的问题，比如技术债务，代码质量，可维护性，可扩展性等等，API Gateway 的模式同样适用于这一类遗留系统的改造，通过微服务化的改造逐步实现对原有系统中的问题修复，从而提升对原有业务响应力的提升。通过引入抽象层，逐步使用新的实现替换旧的实现\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:e(705),alt:\"image-20191115222430725\"}})])])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"_2-zuul\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-zuul\"}},[t._v(\"#\")]),t._v(\" 2. Zuul\")]),t._v(\" \"),r(\"blockquote\",[r(\"p\",[t._v(\"zuul 提供负载均衡，反向代理，权限认证的一个API Gateway。\")]),t._v(\" \"),r(\"p\",[t._v(\"同时还提供动态路由，监控，弹性、安全等服务\")])]),t._v(\" \"),r(\"h2\",{attrs:{id:\"参考文章\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[t._v(\"#\")]),t._v(\" 参考文章\")]),t._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"springcloud(十)：服务网关zuul初级篇\"),r(\"OutboundLink\")],1)])])}),[],!1,null,null,null);a.default=s.exports},703:function(t,a,e){t.exports=e.p+\"assets/img/image-20191115220102366.e0a07490.png\"},704:function(t,a,e){t.exports=e.p+\"assets/img/image-20191115220734859.8113a38c.png\"},705:function(t,a,e){t.exports=e.p+\"assets/img/image-20191115222430725.b96201a2.png\"}}]);","extractedComments":[]}
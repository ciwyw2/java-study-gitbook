{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[376],{1084:function(a,t,v){\"use strict\";v.r(t);var _=v(42),n=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"装配bean\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#装配bean\"}},[a._v(\"#\")]),a._v(\" 装配Bean\")]),a._v(\" \"),v(\"blockquote\",[v(\"p\",[a._v(\"任何一个成功的应用都是由多个为了实现某一个业务目标而相互协作的组件构成的。这些组件必须彼此了解，并且相互协作完成工作\")])]),a._v(\" \"),v(\"p\",[a._v(\"我们的程序也不可能都由一个对象来完成。需要相互之间的关联协作，才能更高效的完成任务。\")]),a._v(\" \"),v(\"p\",[v(\"strong\",[a._v(\"创建应用对象之间协作关系的行为称之为装配，也就是依赖注入（DI）\")])]),a._v(\" \"),v(\"p\",[a._v(\"Spring 容器复责创建应用程序中的bean并通过DI来协调这些对象之间的关系\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"_1-如何创建对象关联\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-如何创建对象关联\"}},[a._v(\"#\")]),a._v(\" 1.如何创建对象关联\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"传统方法（通过构造器或者查找）\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"缺点：对象之间高度耦合，难以复用和测试\")])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"Spring DI依赖注入\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"优势：无需自己查找或创建与所关联的对象，容器负责把需要相互协作的对象引用赋予各个对象\")])])])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"_2-依赖注入的本质-装配-wiring\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-依赖注入的本质-装配-wiring\"}},[a._v(\"#\")]),a._v(\" 2.依赖注入的本质：装配（wiring）\")]),a._v(\" \"),v(\"p\",[a._v(\"装配（wiring）：创建应用对象之间协作关系的行为\")]),a._v(\" \"),v(\"p\",[a._v(\"##3.bean是如何装配在一起的？\")]),a._v(\" \"),v(\"p\",[a._v(\"###3.1 三种装配方式\")]),a._v(\" \"),v(\"p\",[a._v(\"spring 提供了三种方式告诉spring要创建哪些bean。并且如何将其装配在一起\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"在XML中进行显示装配\")]),a._v(\" \"),v(\"li\",[a._v(\"在JAVA中进行显示装配\")]),a._v(\" \"),v(\"li\",[a._v(\"隐式的bean发现机制和自动装配\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"_3-2-装配方式选择\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-装配方式选择\"}},[a._v(\"#\")]),a._v(\" 3.2 装配方式选择\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[v(\"p\",[a._v(\"尽可能的使用自动装配机制，显示配置越少越好。\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"当你必须使用显示配置bean的时候（源码不是你来维护，又需要代码配置bean）。更推荐使用类型安全并且比XML更加强大的JavaConfig\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"当你想使用便利的XML 命名空间，并且在JavaConfig中没有同样的实现时，才应该使用XML\")])])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"_3-3-装配方式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-装配方式\"}},[a._v(\"#\")]),a._v(\" 3.3 装配方式\")]),a._v(\" \"),v(\"h4\",{attrs:{id:\"_3-3-1-自动化装配\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-1-自动化装配\"}},[a._v(\"#\")]),a._v(\" 3.3.1 自动化装配\")]),a._v(\" \"),v(\"p\",[a._v(\"自动装配就是让Spring自动满足bean依赖的一种方法\")]),a._v(\" \"),v(\"p\",[a._v(\"优势：自动化装配最便利\")]),a._v(\" \"),v(\"p\",[a._v(\"Spring 从两个角度来实现自动化装配\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"组件扫描（component scanning）：spring会自动发现应用上下文中所创建的bean\")]),a._v(\" \"),v(\"li\",[a._v(\"自动装配（autowiring）：spring自动满足bean之间的依赖\")])]),a._v(\" \"),v(\"h5\",{attrs:{id:\"注解\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解\"}},[a._v(\"#\")]),a._v(\" 注解\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"@Component：表明该类会作为组件类，并告知Spring要为这个类创建bean\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"Spring 会为所以bean 指定一个id，默认是类名的第一个字母边小写\")])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"@ComponentScan：这个注解能够在Spring 中启用扫描。默认扫描与配置类相同的包\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"也可以使用xml:< context:component-scan >\")]),a._v(\" \"),v(\"li\",[a._v('通过ComponentScan（basePackages={\"image\",\"\"videos}）指定多个包')])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"@Named：是java依赖注入规范提供的注解\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"大多数场景可以和@Component互换，更推荐@Component见名知意\")])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"@Autowired:申明要进行自动装配\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"可以设置在成员变量构造器，setter方法，或者其他方法上。spring会尝试满足方法上声明的依赖\")]),a._v(\" \"),v(\"li\",[a._v(\"可以设置非需要@Autowired(required=false)\")])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"@Inject:来源于Java 依赖注入规范\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"用法同@Autowired\")])])])]),a._v(\" \"),v(\"p\",[a._v(\"###3.3.2 通过Java代码装配bean\")]),a._v(\" \"),v(\"h4\",{attrs:{id:\"使用时机\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用时机\"}},[a._v(\"#\")]),a._v(\" 使用时机\")]),a._v(\" \"),v(\"p\",[a._v(\"想要将第三方库中的组件装配到你的应用中，是没有办法在他的类上使用@Component和@Autowired的。这时候就需要采用显示装配的方式\")]),a._v(\" \"),v(\"p\",[a._v(\"JavaConfig对比XML优势：\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"更加强大，类型安全，并且对重构友好\")])]),a._v(\" \"),v(\"p\",[a._v(\"JavaConfig 是配置代码，这意味着他不应该包含任何业务逻辑\")]),a._v(\" \"),v(\"h4\",{attrs:{id:\"注解-2\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解-2\"}},[a._v(\"#\")]),a._v(\" 注解\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"@Configuration:表明这个类是一个注解类，改类应该包含在spring应用上下文中如何创建bean的细节\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"@Bean：通过该注解声明bean\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"该注解会告诉Spring这个方法将会返回一个对象，该对象要注册为Spring 应用上下文中的bean。方法中包含了最终产生bean 实例的逻辑\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"bean 的ID与带有@bean注解的方法名是一样的，也可以指定name 属性\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"如果还存在其他依赖关系我们可以使用参数的形式表明\")]),a._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[a._v(\"@Bean\\npublic CDPlayer cdplay(ComoactDisc disc){\\n    return new CDPlayer(disc);\\n}\\n\")])])])])])])]),a._v(\" \"),v(\"h4\",{attrs:{id:\"_3-3-3-通过xml-装配bean\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-3-通过xml-装配bean\"}},[a._v(\"#\")]),a._v(\" 3.3.3 通过XML 装配bean\")]),a._v(\" \"),v(\"p\",[a._v(\"在JavaConfig 中的配置规范是，必须创建一个带有@Configuration注解的类\")]),a._v(\" \"),v(\"p\",[a._v(\"在XML配置中，要创建一个XML文件，并且以\"),v(\"beans\",[a._v(\"元素为根\")])],1),a._v(\" \"),v(\"h4\",{attrs:{id:\"声明bean\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#声明bean\"}},[a._v(\"#\")]),a._v(\" 声明bean\")]),a._v(\" \"),v(\"p\",[a._v(\"通过\"),v(\"bean\",[a._v(\"声明一个bean，类似于JavaConfig中的@Bean注解，创建这个bean的类通过class 属性来制定，并且要使用全限定的类名\")])],1),a._v(\" \"),v(\"bean\",{staticClass:\"com.MyClass\"},[v(\"p\",[a._v(\"bean 的id是“com.Myclass#0”,#0是计数形式，区分其他bean，如果你要引用他的话，就需要制定id属性\")]),a._v(\" \"),v(\"bean\",{staticClass:\"com.MyClass\",attrs:{id:\"myclass\"}},[v(\"h4\",{attrs:{id:\"xml-装配案例\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#xml-装配案例\"}},[a._v(\"#\")]),a._v(\" XML 装配案例\")]),a._v(\" \"),v(\"p\",[a._v(\"有两种方案\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"construct-arg\")]),a._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[a._v('<bean id=\"myclass\" class=\"com.MyClass\">\\n\\t<construct-arg ref=\"diClass\"/>\\n\\t<construct-arg value=\"字面量注入构造器\"/>\\n\\t<construct-arg >\\n\\t\\t<list>\\n\\t\\t\\t<value>装配集合</>\\n\\t\\t</list>\\n\\t</construct-arg>\\n\\t<--设置属性--\\x3e\\n\\t<property name=\"compactDisc\" ref=\"compactDisc\"/>\\n\\t<--字面量设置到属性--\\x3e\\n\\t<property name=\"compactDisc\" value=\"字面量设置到属性\"/>\\n</bean>\\n')])])])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"c-命名空间\")]),a._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[a._v('<bean id=\"myclass\" class=\"com.MyClass\"\\nc:cd-ref=\"diClass\"\\nc:_0=\"字面量注入构造器\"\\n<--设置属性--\\x3e\\np:compactDisc-ref=\"compactDisc\"\\n>\\n')])])]),v(\"p\",[a._v(\"使用c命名空间无法装配集合\")])])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"混合配置\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#混合配置\"}},[a._v(\"#\")]),a._v(\" 混合配置\")]),a._v(\" \"),v(\"p\",[a._v(\"可以一部分xml一部分javaConfig 相互引用\")])])],1)],1)}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}
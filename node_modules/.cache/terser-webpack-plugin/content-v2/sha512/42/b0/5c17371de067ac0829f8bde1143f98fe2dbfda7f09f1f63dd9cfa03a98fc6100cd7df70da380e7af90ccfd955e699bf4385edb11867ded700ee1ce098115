{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{1171:function(n,e,r){\"use strict\";r.r(e);var t=r(42),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"axios网络请求封装\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#axios网络请求封装\"}},[n._v(\"#\")]),n._v(\" axios网络请求封装\")]),n._v(\" \"),r(\"h2\",{attrs:{id:\"_1-axios封装\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-axios封装\"}},[n._v(\"#\")]),n._v(\" 1. axios封装\")]),n._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[n._v(\"/**axios封装\\n * 请求拦截、相应拦截、错误统一处理\\n */\\nimport axios from 'axios';\\n// import QS from 'qs';\\nimport { Toast } from 'vant';\\nimport store from '../store/index'\\n\\n// 环境的切换\\nif (process.env.NODE_ENV == 'development') {    \\n    axios.defaults.baseURL = '/api';\\n} else if (process.env.NODE_ENV == 'debug') {    \\n    axios.defaults.baseURL = '';\\n} else if (process.env.NODE_ENV == 'production') {    \\n    axios.defaults.baseURL = 'http://api.123dailu.com/';\\n}\\n\\n// 请求超时时间\\naxios.defaults.timeout = 10000;\\n\\n// post请求头\\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\\n\\n// 请求拦截器\\naxios.interceptors.request.use(    \\n    config => {\\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\\n        // const token = store.state.token;        \\n        // token && (config.headers.Authorization = token);        \\n        return config;    \\n    },    \\n    error => {        \\n        return Promise.error(error);    \\n    })\\n\\n// 响应拦截器\\naxios.interceptors.response.use(    \\n    response => {       \\n       \\n        if (response.status === 200) {          \\n           return Promise.resolve(response);\\n        } else {      \\n            return Promise.reject(response);        \\n        }    \\n    },\\n    // 服务器状态码不是200的情况    \\n    error => {        \\n        if (error.response.status) {            \\n            switch (error.response.status) {                \\n                // 401: 未登录                \\n                // 未登录则跳转登录页面，并携带当前页面的路径                \\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。                \\n                case 401:                    \\n                    router.replace({                        \\n                        path: '/login',                        \\n                        query: { redirect: router.currentRoute.fullPath } \\n                    });\\n                    break;\\n                // 403 token过期                \\n                // 登录过期对用户进行提示                \\n                // 清除本地token和清空vuex中token对象                \\n                // 跳转登录页面                \\n                case 403:                     \\n                    Toast({                        \\n                        message: '登录过期，请重新登录',                        \\n                        duration: 1000,                        \\n                        forbidClick: true                    \\n                    });                    \\n                    // 清除token                    \\n                    localStorage.removeItem('token');                    \\n                    store.commit('loginSuccess', null);                    \\n                    // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\\n                    setTimeout(() => {                        \\n                        router.replace({                            \\n                            path: '/login',                            \\n                            query: { \\n                                redirect: router.currentRoute.fullPath \\n                            }                        \\n                        });                    \\n                    }, 1000);                    \\n                    break; \\n                // 404请求不存在                \\n                case 404:                    \\n                    Toast({                        \\n                        message: '网络请求不存在',                        \\n                        duration: 1500,                        \\n                        forbidClick: true                    \\n                    });                    \\n                break;                \\n                // 其他错误，直接抛出错误提示                \\n                default:                    \\n                    Toast({                        \\n                        message: error.response.data.message,                        \\n                        duration: 1500,                        \\n                        forbidClick: true                    \\n                    });            \\n            }            \\n            return Promise.reject(error.response);        \\n        }       \\n    }\\n);\\n/** \\n * get方法，对应get请求 \\n * @param {String} url [请求的url地址] \\n * @param {Object} params [请求时携带的参数] \\n */\\nexport function get(url, params){    \\n    return new Promise((resolve, reject) =>{        \\n        axios.get(url, {            \\n            params: params        \\n        })        \\n        .then(res => {            \\n            resolve(res.data);        \\n        })        \\n        .catch(err => {            \\n            reject(err.data)        \\n        })    \\n    });\\n}\\n/** \\n * post方法，对应post请求 \\n * @param {String} url [请求的url地址] \\n * @param {Object} params [请求时携带的参数] \\n */\\nexport function post(url, params) {    \\n    return new Promise((resolve, reject) => {         \\n        axios.post(url, params)        \\n        .then(res => {            \\n            resolve(res.data);        \\n        })        \\n        .catch(err => {  \\n            reject(err.data)        \\n        })    \\n    });\\n}\\n\\n/** \\n * post方法，对应post请求  FORM表单形式\\n * @param {String} url [请求的url地址] \\n * @param {Object} params [请求时携带的参数] \\n */\\nexport function postForm(url, params) {    \\n  return new Promise((resolve, reject) => {         \\n      axios.post(url, tansParams(params))        \\n      .then(res => {            \\n          resolve(res.data);        \\n      })        \\n      .catch(err => {  \\n          reject(err.data)        \\n      })    \\n  });\\n}\\n\\nfunction tansParams(params) {\\n  let result = ''\\n  Object.keys(params).forEach((key) => {\\n    if (!Object.is(params[key], undefined) && !Object.is(params[key], null)) {\\n      result += encodeURIComponent(key) + '=' + encodeURIComponent(params[key]) + '&'\\n    }\\n  })\\n  return result\\n}\\n\\n\")])])]),r(\"h2\",{attrs:{id:\"_2-api-请求类-根据实际业务\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-api-请求类-根据实际业务\"}},[n._v(\"#\")]),n._v(\" 2. APi 请求类（根据实际业务）\")]),n._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[n._v(\"import { get, post,postForm } from '@/utils/request';\\n\\n\\nlet api={\\n    /**\\n     * 对应的请求\\n     */\\n    getList (params) {\\n        return postForm(\\\"/getList.do\\\", params);\\n    },\\n\\n\\n};\\n\\nexport default api;\\n\\n\\n\")])])]),r(\"h2\",{attrs:{id:\"_3-对应页面做请求\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-对应页面做请求\"}},[n._v(\"#\")]),n._v(\" 3. 对应页面做请求\")]),n._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[r(\"code\",[n._v('<script>\\nimport api from \"@/api/api\";\\nexport default {\\n  mounted() {\\n    this.getList();\\n  },\\n  methods: {\\n    // 经验汇编\\n    getList() {\\n       let that = this;\\n      let params = {\\n        page: 1,\\n        pageSize: 100,\\n      };\\n\\n      api.getList(params).then((res) => {\\n        if (res.code == 0) {\\n          that.caseCodeList = res.resultDatas.list;\\n        }\\n      });\\n    },\\n  },\\n')])])]),r(\"h2\",{attrs:{id:\"参考文章\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考文章\"}},[n._v(\"#\")]),n._v(\" 参考文章\")]),n._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://juejin.im/post/6844903652881072141\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"vue中Axios的封装和API接口的管理\"),r(\"OutboundLink\")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}